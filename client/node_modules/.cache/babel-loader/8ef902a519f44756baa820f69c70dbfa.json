{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events'),\n      MongoError = require('../core').MongoError,\n      f = require('util').format,\n      os = require('os'),\n      translateReadPreference = require('../utils').translateReadPreference,\n      ClientSession = require('../core').Sessions.ClientSession; // The store of ops\n\n\nvar Store = function (topology, storeOptions) {\n  var self = this;\n  var storedOps = [];\n  storeOptions = storeOptions || {\n    force: false,\n    bufferMaxEntries: -1\n  }; // Internal state\n\n  this.s = {\n    storedOps: storedOps,\n    storeOptions: storeOptions,\n    topology: topology\n  };\n  Object.defineProperty(this, 'length', {\n    enumerable: true,\n    get: function () {\n      return self.s.storedOps.length;\n    }\n  });\n};\n\nStore.prototype.add = function (opType, ns, ops, options, callback) {\n  if (this.s.storeOptions.force) {\n    return callback(MongoError.create({\n      message: 'db closed by application',\n      driver: true\n    }));\n  }\n\n  if (this.s.storeOptions.bufferMaxEntries === 0) {\n    return callback(MongoError.create({\n      message: f('no connection available for operation and number of stored operation > %s', this.s.storeOptions.bufferMaxEntries),\n      driver: true\n    }));\n  }\n\n  if (this.s.storeOptions.bufferMaxEntries > 0 && this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries) {\n    while (this.s.storedOps.length > 0) {\n      var op = this.s.storedOps.shift();\n      op.c(MongoError.create({\n        message: f('no connection available for operation and number of stored operation > %s', this.s.storeOptions.bufferMaxEntries),\n        driver: true\n      }));\n    }\n\n    return;\n  }\n\n  this.s.storedOps.push({\n    t: opType,\n    n: ns,\n    o: ops,\n    op: options,\n    c: callback\n  });\n};\n\nStore.prototype.addObjectAndMethod = function (opType, object, method, params, callback) {\n  if (this.s.storeOptions.force) {\n    return callback(MongoError.create({\n      message: 'db closed by application',\n      driver: true\n    }));\n  }\n\n  if (this.s.storeOptions.bufferMaxEntries === 0) {\n    return callback(MongoError.create({\n      message: f('no connection available for operation and number of stored operation > %s', this.s.storeOptions.bufferMaxEntries),\n      driver: true\n    }));\n  }\n\n  if (this.s.storeOptions.bufferMaxEntries > 0 && this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries) {\n    while (this.s.storedOps.length > 0) {\n      var op = this.s.storedOps.shift();\n      op.c(MongoError.create({\n        message: f('no connection available for operation and number of stored operation > %s', this.s.storeOptions.bufferMaxEntries),\n        driver: true\n      }));\n    }\n\n    return;\n  }\n\n  this.s.storedOps.push({\n    t: opType,\n    m: method,\n    o: object,\n    p: params,\n    c: callback\n  });\n};\n\nStore.prototype.flush = function (err) {\n  while (this.s.storedOps.length > 0) {\n    this.s.storedOps.shift().c(err || MongoError.create({\n      message: f('no connection available for operation'),\n      driver: true\n    }));\n  }\n};\n\nvar primaryOptions = ['primary', 'primaryPreferred', 'nearest', 'secondaryPreferred'];\nvar secondaryOptions = ['secondary', 'secondaryPreferred'];\n\nStore.prototype.execute = function (options) {\n  options = options || {}; // Get current ops\n\n  var ops = this.s.storedOps; // Reset the ops\n\n  this.s.storedOps = []; // Unpack options\n\n  var executePrimary = typeof options.executePrimary === 'boolean' ? options.executePrimary : true;\n  var executeSecondary = typeof options.executeSecondary === 'boolean' ? options.executeSecondary : true; // Execute all the stored ops\n\n  while (ops.length > 0) {\n    var op = ops.shift();\n\n    if (op.t === 'cursor') {\n      if (executePrimary && executeSecondary) {\n        op.o[op.m].apply(op.o, op.p);\n      } else if (executePrimary && op.o.options && op.o.options.readPreference && primaryOptions.indexOf(op.o.options.readPreference.mode) !== -1) {\n        op.o[op.m].apply(op.o, op.p);\n      } else if (!executePrimary && executeSecondary && op.o.options && op.o.options.readPreference && secondaryOptions.indexOf(op.o.options.readPreference.mode) !== -1) {\n        op.o[op.m].apply(op.o, op.p);\n      }\n    } else if (op.t === 'auth') {\n      this.s.topology[op.t].apply(this.s.topology, op.o);\n    } else {\n      if (executePrimary && executeSecondary) {\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\n      } else if (executePrimary && op.op && op.op.readPreference && primaryOptions.indexOf(op.op.readPreference.mode) !== -1) {\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\n      } else if (!executePrimary && executeSecondary && op.op && op.op.readPreference && secondaryOptions.indexOf(op.op.readPreference.mode) !== -1) {\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\n      }\n    }\n  }\n};\n\nStore.prototype.all = function () {\n  return this.s.storedOps;\n}; // Server capabilities\n\n\nvar ServerCapabilities = function (ismaster) {\n  var setup_get_property = function (object, name, value) {\n    Object.defineProperty(object, name, {\n      enumerable: true,\n      get: function () {\n        return value;\n      }\n    });\n  }; // Capabilities\n\n\n  var aggregationCursor = false;\n  var writeCommands = false;\n  var textSearch = false;\n  var authCommands = false;\n  var listCollections = false;\n  var listIndexes = false;\n  var maxNumberOfDocsInBatch = ismaster.maxWriteBatchSize || 1000;\n  var commandsTakeWriteConcern = false;\n  var commandsTakeCollation = false;\n\n  if (ismaster.minWireVersion >= 0) {\n    textSearch = true;\n  }\n\n  if (ismaster.maxWireVersion >= 1) {\n    aggregationCursor = true;\n    authCommands = true;\n  }\n\n  if (ismaster.maxWireVersion >= 2) {\n    writeCommands = true;\n  }\n\n  if (ismaster.maxWireVersion >= 3) {\n    listCollections = true;\n    listIndexes = true;\n  }\n\n  if (ismaster.maxWireVersion >= 5) {\n    commandsTakeWriteConcern = true;\n    commandsTakeCollation = true;\n  } // If no min or max wire version set to 0\n\n\n  if (ismaster.minWireVersion == null) {\n    ismaster.minWireVersion = 0;\n  }\n\n  if (ismaster.maxWireVersion == null) {\n    ismaster.maxWireVersion = 0;\n  } // Map up read only parameters\n\n\n  setup_get_property(this, 'hasAggregationCursor', aggregationCursor);\n  setup_get_property(this, 'hasWriteCommands', writeCommands);\n  setup_get_property(this, 'hasTextSearch', textSearch);\n  setup_get_property(this, 'hasAuthCommands', authCommands);\n  setup_get_property(this, 'hasListCollectionsCommand', listCollections);\n  setup_get_property(this, 'hasListIndexesCommand', listIndexes);\n  setup_get_property(this, 'minWireVersion', ismaster.minWireVersion);\n  setup_get_property(this, 'maxWireVersion', ismaster.maxWireVersion);\n  setup_get_property(this, 'maxNumberOfDocsInBatch', maxNumberOfDocsInBatch);\n  setup_get_property(this, 'commandsTakeWriteConcern', commandsTakeWriteConcern);\n  setup_get_property(this, 'commandsTakeCollation', commandsTakeCollation);\n}; // Get package.json variable\n\n\nconst driverVersion = require('../../package.json').version,\n      nodejsversion = f('Node.js %s, %s', process.version, os.endianness()),\n      type = os.type(),\n      name = process.platform,\n      architecture = process.arch,\n      release = os.release();\n\nclass TopologyBase extends EventEmitter {\n  constructor() {\n    super(); // Build default client information\n\n    this.clientInfo = {\n      driver: {\n        name: 'nodejs',\n        version: driverVersion\n      },\n      os: {\n        type: type,\n        name: name,\n        architecture: architecture,\n        version: release\n      },\n      platform: nodejsversion\n    };\n    this.setMaxListeners(Infinity);\n  } // Sessions related methods\n\n\n  hasSessionSupport() {\n    return this.logicalSessionTimeoutMinutes != null;\n  }\n\n  startSession(options, clientOptions) {\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n    this.s.sessions.add(session);\n    return session;\n  }\n\n  endSessions(sessions, callback) {\n    return this.s.coreTopology.endSessions(sessions, callback);\n  } // Server capabilities\n\n\n  capabilities() {\n    if (this.s.sCapabilities) return this.s.sCapabilities;\n    if (this.s.coreTopology.lastIsMaster() == null) return null;\n    this.s.sCapabilities = new ServerCapabilities(this.s.coreTopology.lastIsMaster());\n    return this.s.sCapabilities;\n  } // Command\n\n\n  command(ns, cmd, options, callback) {\n    this.s.coreTopology.command(ns.toString(), cmd, translateReadPreference(options), callback);\n  } // Insert\n\n\n  insert(ns, ops, options, callback) {\n    this.s.coreTopology.insert(ns.toString(), ops, options, callback);\n  } // Update\n\n\n  update(ns, ops, options, callback) {\n    this.s.coreTopology.update(ns.toString(), ops, options, callback);\n  } // Remove\n\n\n  remove(ns, ops, options, callback) {\n    this.s.coreTopology.remove(ns.toString(), ops, options, callback);\n  } // IsConnected\n\n\n  isConnected(options) {\n    options = options || {};\n    options = translateReadPreference(options);\n    return this.s.coreTopology.isConnected(options);\n  } // IsDestroyed\n\n\n  isDestroyed() {\n    return this.s.coreTopology.isDestroyed();\n  } // Cursor\n\n\n  cursor(ns, cmd, options) {\n    options = options || {};\n    options = translateReadPreference(options);\n    options.disconnectHandler = this.s.store;\n    options.topology = this;\n    return this.s.coreTopology.cursor(ns, cmd, options);\n  }\n\n  lastIsMaster() {\n    return this.s.coreTopology.lastIsMaster();\n  }\n\n  selectServer(selector, options, callback) {\n    return this.s.coreTopology.selectServer(selector, options, callback);\n  }\n  /**\r\n   * Unref all sockets\r\n   * @method\r\n   */\n\n\n  unref() {\n    return this.s.coreTopology.unref();\n  }\n  /**\r\n   * All raw connections\r\n   * @method\r\n   * @return {array}\r\n   */\n\n\n  connections() {\n    return this.s.coreTopology.connections();\n  }\n\n  close(forceClosed, callback) {\n    // If we have sessions, we want to individually move them to the session pool,\n    // and then send a single endSessions call.\n    this.s.sessions.forEach(session => session.endSession());\n\n    if (this.s.sessionPool) {\n      this.s.sessionPool.endAllPooledSessions();\n    } // We need to wash out all stored processes\n\n\n    if (forceClosed === true) {\n      this.s.storeOptions.force = forceClosed;\n      this.s.store.flush();\n    }\n\n    this.s.coreTopology.destroy({\n      force: typeof forceClosed === 'boolean' ? forceClosed : false\n    }, callback);\n  }\n\n} // Properties\n\n\nObject.defineProperty(TopologyBase.prototype, 'bson', {\n  enumerable: true,\n  get: function () {\n    return this.s.coreTopology.s.bson;\n  }\n});\nObject.defineProperty(TopologyBase.prototype, 'parserType', {\n  enumerable: true,\n  get: function () {\n    return this.s.coreTopology.parserType;\n  }\n});\nObject.defineProperty(TopologyBase.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function () {\n    return this.s.coreTopology.logicalSessionTimeoutMinutes;\n  }\n});\nObject.defineProperty(TopologyBase.prototype, 'type', {\n  enumerable: true,\n  get: function () {\n    return this.s.coreTopology.type;\n  }\n});\nexports.Store = Store;\nexports.ServerCapabilities = ServerCapabilities;\nexports.TopologyBase = TopologyBase;","map":{"version":3,"sources":["C:/Users/mehta/daydream/node_modules/mongodb/lib/topologies/topology_base.js"],"names":["EventEmitter","require","MongoError","f","format","os","translateReadPreference","ClientSession","Sessions","Store","topology","storeOptions","self","storedOps","force","bufferMaxEntries","s","Object","defineProperty","enumerable","get","length","prototype","add","opType","ns","ops","options","callback","create","message","driver","op","shift","c","push","t","n","o","addObjectAndMethod","object","method","params","m","p","flush","err","primaryOptions","secondaryOptions","execute","executePrimary","executeSecondary","apply","readPreference","indexOf","mode","all","ServerCapabilities","ismaster","setup_get_property","name","value","aggregationCursor","writeCommands","textSearch","authCommands","listCollections","listIndexes","maxNumberOfDocsInBatch","maxWriteBatchSize","commandsTakeWriteConcern","commandsTakeCollation","minWireVersion","maxWireVersion","driverVersion","version","nodejsversion","process","endianness","type","platform","architecture","arch","release","TopologyBase","constructor","clientInfo","setMaxListeners","Infinity","hasSessionSupport","logicalSessionTimeoutMinutes","startSession","clientOptions","session","sessionPool","once","sessions","delete","endSessions","coreTopology","capabilities","sCapabilities","lastIsMaster","command","cmd","toString","insert","update","remove","isConnected","isDestroyed","cursor","disconnectHandler","store","selectServer","selector","unref","connections","close","forceClosed","forEach","endSession","endAllPooledSessions","destroy","bson","parserType","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst EventEmitter = require('events'),\r\n  MongoError = require('../core').MongoError,\r\n  f = require('util').format,\r\n  os = require('os'),\r\n  translateReadPreference = require('../utils').translateReadPreference,\r\n  ClientSession = require('../core').Sessions.ClientSession;\r\n\r\n// The store of ops\r\nvar Store = function(topology, storeOptions) {\r\n  var self = this;\r\n  var storedOps = [];\r\n  storeOptions = storeOptions || { force: false, bufferMaxEntries: -1 };\r\n\r\n  // Internal state\r\n  this.s = {\r\n    storedOps: storedOps,\r\n    storeOptions: storeOptions,\r\n    topology: topology\r\n  };\r\n\r\n  Object.defineProperty(this, 'length', {\r\n    enumerable: true,\r\n    get: function() {\r\n      return self.s.storedOps.length;\r\n    }\r\n  });\r\n};\r\n\r\nStore.prototype.add = function(opType, ns, ops, options, callback) {\r\n  if (this.s.storeOptions.force) {\r\n    return callback(MongoError.create({ message: 'db closed by application', driver: true }));\r\n  }\r\n\r\n  if (this.s.storeOptions.bufferMaxEntries === 0) {\r\n    return callback(\r\n      MongoError.create({\r\n        message: f(\r\n          'no connection available for operation and number of stored operation > %s',\r\n          this.s.storeOptions.bufferMaxEntries\r\n        ),\r\n        driver: true\r\n      })\r\n    );\r\n  }\r\n\r\n  if (\r\n    this.s.storeOptions.bufferMaxEntries > 0 &&\r\n    this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries\r\n  ) {\r\n    while (this.s.storedOps.length > 0) {\r\n      var op = this.s.storedOps.shift();\r\n      op.c(\r\n        MongoError.create({\r\n          message: f(\r\n            'no connection available for operation and number of stored operation > %s',\r\n            this.s.storeOptions.bufferMaxEntries\r\n          ),\r\n          driver: true\r\n        })\r\n      );\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  this.s.storedOps.push({ t: opType, n: ns, o: ops, op: options, c: callback });\r\n};\r\n\r\nStore.prototype.addObjectAndMethod = function(opType, object, method, params, callback) {\r\n  if (this.s.storeOptions.force) {\r\n    return callback(MongoError.create({ message: 'db closed by application', driver: true }));\r\n  }\r\n\r\n  if (this.s.storeOptions.bufferMaxEntries === 0) {\r\n    return callback(\r\n      MongoError.create({\r\n        message: f(\r\n          'no connection available for operation and number of stored operation > %s',\r\n          this.s.storeOptions.bufferMaxEntries\r\n        ),\r\n        driver: true\r\n      })\r\n    );\r\n  }\r\n\r\n  if (\r\n    this.s.storeOptions.bufferMaxEntries > 0 &&\r\n    this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries\r\n  ) {\r\n    while (this.s.storedOps.length > 0) {\r\n      var op = this.s.storedOps.shift();\r\n      op.c(\r\n        MongoError.create({\r\n          message: f(\r\n            'no connection available for operation and number of stored operation > %s',\r\n            this.s.storeOptions.bufferMaxEntries\r\n          ),\r\n          driver: true\r\n        })\r\n      );\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  this.s.storedOps.push({ t: opType, m: method, o: object, p: params, c: callback });\r\n};\r\n\r\nStore.prototype.flush = function(err) {\r\n  while (this.s.storedOps.length > 0) {\r\n    this.s.storedOps\r\n      .shift()\r\n      .c(\r\n        err ||\r\n          MongoError.create({ message: f('no connection available for operation'), driver: true })\r\n      );\r\n  }\r\n};\r\n\r\nvar primaryOptions = ['primary', 'primaryPreferred', 'nearest', 'secondaryPreferred'];\r\nvar secondaryOptions = ['secondary', 'secondaryPreferred'];\r\n\r\nStore.prototype.execute = function(options) {\r\n  options = options || {};\r\n  // Get current ops\r\n  var ops = this.s.storedOps;\r\n  // Reset the ops\r\n  this.s.storedOps = [];\r\n\r\n  // Unpack options\r\n  var executePrimary = typeof options.executePrimary === 'boolean' ? options.executePrimary : true;\r\n  var executeSecondary =\r\n    typeof options.executeSecondary === 'boolean' ? options.executeSecondary : true;\r\n\r\n  // Execute all the stored ops\r\n  while (ops.length > 0) {\r\n    var op = ops.shift();\r\n\r\n    if (op.t === 'cursor') {\r\n      if (executePrimary && executeSecondary) {\r\n        op.o[op.m].apply(op.o, op.p);\r\n      } else if (\r\n        executePrimary &&\r\n        op.o.options &&\r\n        op.o.options.readPreference &&\r\n        primaryOptions.indexOf(op.o.options.readPreference.mode) !== -1\r\n      ) {\r\n        op.o[op.m].apply(op.o, op.p);\r\n      } else if (\r\n        !executePrimary &&\r\n        executeSecondary &&\r\n        op.o.options &&\r\n        op.o.options.readPreference &&\r\n        secondaryOptions.indexOf(op.o.options.readPreference.mode) !== -1\r\n      ) {\r\n        op.o[op.m].apply(op.o, op.p);\r\n      }\r\n    } else if (op.t === 'auth') {\r\n      this.s.topology[op.t].apply(this.s.topology, op.o);\r\n    } else {\r\n      if (executePrimary && executeSecondary) {\r\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\r\n      } else if (\r\n        executePrimary &&\r\n        op.op &&\r\n        op.op.readPreference &&\r\n        primaryOptions.indexOf(op.op.readPreference.mode) !== -1\r\n      ) {\r\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\r\n      } else if (\r\n        !executePrimary &&\r\n        executeSecondary &&\r\n        op.op &&\r\n        op.op.readPreference &&\r\n        secondaryOptions.indexOf(op.op.readPreference.mode) !== -1\r\n      ) {\r\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nStore.prototype.all = function() {\r\n  return this.s.storedOps;\r\n};\r\n\r\n// Server capabilities\r\nvar ServerCapabilities = function(ismaster) {\r\n  var setup_get_property = function(object, name, value) {\r\n    Object.defineProperty(object, name, {\r\n      enumerable: true,\r\n      get: function() {\r\n        return value;\r\n      }\r\n    });\r\n  };\r\n\r\n  // Capabilities\r\n  var aggregationCursor = false;\r\n  var writeCommands = false;\r\n  var textSearch = false;\r\n  var authCommands = false;\r\n  var listCollections = false;\r\n  var listIndexes = false;\r\n  var maxNumberOfDocsInBatch = ismaster.maxWriteBatchSize || 1000;\r\n  var commandsTakeWriteConcern = false;\r\n  var commandsTakeCollation = false;\r\n\r\n  if (ismaster.minWireVersion >= 0) {\r\n    textSearch = true;\r\n  }\r\n\r\n  if (ismaster.maxWireVersion >= 1) {\r\n    aggregationCursor = true;\r\n    authCommands = true;\r\n  }\r\n\r\n  if (ismaster.maxWireVersion >= 2) {\r\n    writeCommands = true;\r\n  }\r\n\r\n  if (ismaster.maxWireVersion >= 3) {\r\n    listCollections = true;\r\n    listIndexes = true;\r\n  }\r\n\r\n  if (ismaster.maxWireVersion >= 5) {\r\n    commandsTakeWriteConcern = true;\r\n    commandsTakeCollation = true;\r\n  }\r\n\r\n  // If no min or max wire version set to 0\r\n  if (ismaster.minWireVersion == null) {\r\n    ismaster.minWireVersion = 0;\r\n  }\r\n\r\n  if (ismaster.maxWireVersion == null) {\r\n    ismaster.maxWireVersion = 0;\r\n  }\r\n\r\n  // Map up read only parameters\r\n  setup_get_property(this, 'hasAggregationCursor', aggregationCursor);\r\n  setup_get_property(this, 'hasWriteCommands', writeCommands);\r\n  setup_get_property(this, 'hasTextSearch', textSearch);\r\n  setup_get_property(this, 'hasAuthCommands', authCommands);\r\n  setup_get_property(this, 'hasListCollectionsCommand', listCollections);\r\n  setup_get_property(this, 'hasListIndexesCommand', listIndexes);\r\n  setup_get_property(this, 'minWireVersion', ismaster.minWireVersion);\r\n  setup_get_property(this, 'maxWireVersion', ismaster.maxWireVersion);\r\n  setup_get_property(this, 'maxNumberOfDocsInBatch', maxNumberOfDocsInBatch);\r\n  setup_get_property(this, 'commandsTakeWriteConcern', commandsTakeWriteConcern);\r\n  setup_get_property(this, 'commandsTakeCollation', commandsTakeCollation);\r\n};\r\n\r\n// Get package.json variable\r\nconst driverVersion = require('../../package.json').version,\r\n  nodejsversion = f('Node.js %s, %s', process.version, os.endianness()),\r\n  type = os.type(),\r\n  name = process.platform,\r\n  architecture = process.arch,\r\n  release = os.release();\r\n\r\nclass TopologyBase extends EventEmitter {\r\n  constructor() {\r\n    super();\r\n\r\n    // Build default client information\r\n    this.clientInfo = {\r\n      driver: {\r\n        name: 'nodejs',\r\n        version: driverVersion\r\n      },\r\n      os: {\r\n        type: type,\r\n        name: name,\r\n        architecture: architecture,\r\n        version: release\r\n      },\r\n      platform: nodejsversion\r\n    };\r\n\r\n    this.setMaxListeners(Infinity);\r\n  }\r\n\r\n  // Sessions related methods\r\n  hasSessionSupport() {\r\n    return this.logicalSessionTimeoutMinutes != null;\r\n  }\r\n\r\n  startSession(options, clientOptions) {\r\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\r\n\r\n    session.once('ended', () => {\r\n      this.s.sessions.delete(session);\r\n    });\r\n\r\n    this.s.sessions.add(session);\r\n    return session;\r\n  }\r\n\r\n  endSessions(sessions, callback) {\r\n    return this.s.coreTopology.endSessions(sessions, callback);\r\n  }\r\n\r\n  // Server capabilities\r\n  capabilities() {\r\n    if (this.s.sCapabilities) return this.s.sCapabilities;\r\n    if (this.s.coreTopology.lastIsMaster() == null) return null;\r\n    this.s.sCapabilities = new ServerCapabilities(this.s.coreTopology.lastIsMaster());\r\n    return this.s.sCapabilities;\r\n  }\r\n\r\n  // Command\r\n  command(ns, cmd, options, callback) {\r\n    this.s.coreTopology.command(ns.toString(), cmd, translateReadPreference(options), callback);\r\n  }\r\n\r\n  // Insert\r\n  insert(ns, ops, options, callback) {\r\n    this.s.coreTopology.insert(ns.toString(), ops, options, callback);\r\n  }\r\n\r\n  // Update\r\n  update(ns, ops, options, callback) {\r\n    this.s.coreTopology.update(ns.toString(), ops, options, callback);\r\n  }\r\n\r\n  // Remove\r\n  remove(ns, ops, options, callback) {\r\n    this.s.coreTopology.remove(ns.toString(), ops, options, callback);\r\n  }\r\n\r\n  // IsConnected\r\n  isConnected(options) {\r\n    options = options || {};\r\n    options = translateReadPreference(options);\r\n\r\n    return this.s.coreTopology.isConnected(options);\r\n  }\r\n\r\n  // IsDestroyed\r\n  isDestroyed() {\r\n    return this.s.coreTopology.isDestroyed();\r\n  }\r\n\r\n  // Cursor\r\n  cursor(ns, cmd, options) {\r\n    options = options || {};\r\n    options = translateReadPreference(options);\r\n    options.disconnectHandler = this.s.store;\r\n    options.topology = this;\r\n\r\n    return this.s.coreTopology.cursor(ns, cmd, options);\r\n  }\r\n\r\n  lastIsMaster() {\r\n    return this.s.coreTopology.lastIsMaster();\r\n  }\r\n\r\n  selectServer(selector, options, callback) {\r\n    return this.s.coreTopology.selectServer(selector, options, callback);\r\n  }\r\n\r\n  /**\r\n   * Unref all sockets\r\n   * @method\r\n   */\r\n  unref() {\r\n    return this.s.coreTopology.unref();\r\n  }\r\n\r\n  /**\r\n   * All raw connections\r\n   * @method\r\n   * @return {array}\r\n   */\r\n  connections() {\r\n    return this.s.coreTopology.connections();\r\n  }\r\n\r\n  close(forceClosed, callback) {\r\n    // If we have sessions, we want to individually move them to the session pool,\r\n    // and then send a single endSessions call.\r\n    this.s.sessions.forEach(session => session.endSession());\r\n\r\n    if (this.s.sessionPool) {\r\n      this.s.sessionPool.endAllPooledSessions();\r\n    }\r\n\r\n    // We need to wash out all stored processes\r\n    if (forceClosed === true) {\r\n      this.s.storeOptions.force = forceClosed;\r\n      this.s.store.flush();\r\n    }\r\n\r\n    this.s.coreTopology.destroy(\r\n      {\r\n        force: typeof forceClosed === 'boolean' ? forceClosed : false\r\n      },\r\n      callback\r\n    );\r\n  }\r\n}\r\n\r\n// Properties\r\nObject.defineProperty(TopologyBase.prototype, 'bson', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return this.s.coreTopology.s.bson;\r\n  }\r\n});\r\n\r\nObject.defineProperty(TopologyBase.prototype, 'parserType', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return this.s.coreTopology.parserType;\r\n  }\r\n});\r\n\r\nObject.defineProperty(TopologyBase.prototype, 'logicalSessionTimeoutMinutes', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return this.s.coreTopology.logicalSessionTimeoutMinutes;\r\n  }\r\n});\r\n\r\nObject.defineProperty(TopologyBase.prototype, 'type', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return this.s.coreTopology.type;\r\n  }\r\n});\r\n\r\nexports.Store = Store;\r\nexports.ServerCapabilities = ServerCapabilities;\r\nexports.TopologyBase = TopologyBase;\r\n"]},"metadata":{},"sourceType":"script"}