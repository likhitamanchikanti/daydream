{"ast":null,"code":"'use strict';\n\nconst Topology = require('../core').Topology;\n\nconst ServerCapabilities = require('./topology_base').ServerCapabilities;\n\nconst Cursor = require('../cursor');\n\nconst translateOptions = require('../utils').translateOptions;\n\nclass NativeTopology extends Topology {\n  constructor(servers, options) {\n    options = options || {};\n    let clonedOptions = Object.assign({}, {\n      cursorFactory: Cursor,\n      reconnect: false,\n      emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\n      size: typeof options.poolSize === 'number' ? options.poolSize : 5,\n      monitorCommands: typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false\n    }); // Translate any SSL options and other connectivity options\n\n    clonedOptions = translateOptions(clonedOptions, options); // Socket options\n\n    var socketOptions = options.socketOptions && Object.keys(options.socketOptions).length > 0 ? options.socketOptions : options; // Translate all the options to the core types\n\n    clonedOptions = translateOptions(clonedOptions, socketOptions);\n    super(servers, clonedOptions); // Do we have an application specific string\n\n    if (options.appname) {\n      this.s.clientInfo.application = {\n        name: options.appname\n      };\n    }\n  }\n\n  capabilities() {\n    if (this.s.sCapabilities) return this.s.sCapabilities;\n    if (this.lastIsMaster() == null) return null;\n    this.s.sCapabilities = new ServerCapabilities(this.lastIsMaster());\n    return this.s.sCapabilities;\n  } // Command\n\n\n  command(ns, cmd, options, callback) {\n    super.command(ns.toString(), cmd, options, callback);\n  } // Insert\n\n\n  insert(ns, ops, options, callback) {\n    super.insert(ns.toString(), ops, options, callback);\n  } // Update\n\n\n  update(ns, ops, options, callback) {\n    super.update(ns.toString(), ops, options, callback);\n  } // Remove\n\n\n  remove(ns, ops, options, callback) {\n    super.remove(ns.toString(), ops, options, callback);\n  }\n\n}\n\nmodule.exports = NativeTopology;","map":{"version":3,"sources":["C:/Users/mehta/daydream/node_modules/mongodb/lib/topologies/native_topology.js"],"names":["Topology","require","ServerCapabilities","Cursor","translateOptions","NativeTopology","constructor","servers","options","clonedOptions","Object","assign","cursorFactory","reconnect","emitError","size","poolSize","monitorCommands","socketOptions","keys","length","appname","s","clientInfo","application","name","capabilities","sCapabilities","lastIsMaster","command","ns","cmd","callback","toString","insert","ops","update","remove","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst Topology = require('../core').Topology;\r\nconst ServerCapabilities = require('./topology_base').ServerCapabilities;\r\nconst Cursor = require('../cursor');\r\nconst translateOptions = require('../utils').translateOptions;\r\n\r\nclass NativeTopology extends Topology {\r\n  constructor(servers, options) {\r\n    options = options || {};\r\n\r\n    let clonedOptions = Object.assign(\r\n      {},\r\n      {\r\n        cursorFactory: Cursor,\r\n        reconnect: false,\r\n        emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\r\n        size: typeof options.poolSize === 'number' ? options.poolSize : 5,\r\n        monitorCommands:\r\n          typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false\r\n      }\r\n    );\r\n\r\n    // Translate any SSL options and other connectivity options\r\n    clonedOptions = translateOptions(clonedOptions, options);\r\n\r\n    // Socket options\r\n    var socketOptions =\r\n      options.socketOptions && Object.keys(options.socketOptions).length > 0\r\n        ? options.socketOptions\r\n        : options;\r\n\r\n    // Translate all the options to the core types\r\n    clonedOptions = translateOptions(clonedOptions, socketOptions);\r\n\r\n    super(servers, clonedOptions);\r\n\r\n    // Do we have an application specific string\r\n    if (options.appname) {\r\n      this.s.clientInfo.application = { name: options.appname };\r\n    }\r\n  }\r\n\r\n  capabilities() {\r\n    if (this.s.sCapabilities) return this.s.sCapabilities;\r\n    if (this.lastIsMaster() == null) return null;\r\n    this.s.sCapabilities = new ServerCapabilities(this.lastIsMaster());\r\n    return this.s.sCapabilities;\r\n  }\r\n\r\n  // Command\r\n  command(ns, cmd, options, callback) {\r\n    super.command(ns.toString(), cmd, options, callback);\r\n  }\r\n\r\n  // Insert\r\n  insert(ns, ops, options, callback) {\r\n    super.insert(ns.toString(), ops, options, callback);\r\n  }\r\n\r\n  // Update\r\n  update(ns, ops, options, callback) {\r\n    super.update(ns.toString(), ops, options, callback);\r\n  }\r\n\r\n  // Remove\r\n  remove(ns, ops, options, callback) {\r\n    super.remove(ns.toString(), ops, options, callback);\r\n  }\r\n}\r\n\r\nmodule.exports = NativeTopology;\r\n"]},"metadata":{},"sourceType":"script"}