{"ast":null,"code":"'use strict';\n\nvar Snappy = require('../connection/utils').retrieveSnappy(),\n    zlib = require('zlib');\n\nvar compressorIDs = {\n  snappy: 1,\n  zlib: 2\n};\nvar uncompressibleCommands = ['ismaster', 'saslStart', 'saslContinue', 'getnonce', 'authenticate', 'createUser', 'updateUser', 'copydbSaslStart', 'copydbgetnonce', 'copydb']; // Facilitate compressing a message using an agreed compressor\n\nvar compress = function (self, dataToBeCompressed, callback) {\n  switch (self.options.agreedCompressor) {\n    case 'snappy':\n      Snappy.compress(dataToBeCompressed, callback);\n      break;\n\n    case 'zlib':\n      // Determine zlibCompressionLevel\n      var zlibOptions = {};\n\n      if (self.options.zlibCompressionLevel) {\n        zlibOptions.level = self.options.zlibCompressionLevel;\n      }\n\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback);\n      break;\n\n    default:\n      throw new Error('Attempt to compress message using unknown compressor \"' + self.options.agreedCompressor + '\".');\n  }\n}; // Decompress a message using the given compressor\n\n\nvar decompress = function (compressorID, compressedData, callback) {\n  if (compressorID < 0 || compressorID > compressorIDs.length) {\n    throw new Error('Server sent message compressed using an unsupported compressor. (Received compressor ID ' + compressorID + ')');\n  }\n\n  switch (compressorID) {\n    case compressorIDs.snappy:\n      Snappy.uncompress(compressedData, callback);\n      break;\n\n    case compressorIDs.zlib:\n      zlib.inflate(compressedData, callback);\n      break;\n\n    default:\n      callback(null, compressedData);\n  }\n};\n\nmodule.exports = {\n  compressorIDs: compressorIDs,\n  uncompressibleCommands: uncompressibleCommands,\n  compress: compress,\n  decompress: decompress\n};","map":{"version":3,"sources":["C:/Users/mehta/daydream/node_modules/mongodb/lib/core/wireprotocol/compression.js"],"names":["Snappy","require","retrieveSnappy","zlib","compressorIDs","snappy","uncompressibleCommands","compress","self","dataToBeCompressed","callback","options","agreedCompressor","zlibOptions","zlibCompressionLevel","level","deflate","Error","decompress","compressorID","compressedData","length","uncompress","inflate","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,qBAAD,CAAP,CAA+BC,cAA/B,EAAb;AAAA,IACEC,IAAI,GAAGF,OAAO,CAAC,MAAD,CADhB;;AAGA,IAAIG,aAAa,GAAG;AAClBC,EAAAA,MAAM,EAAE,CADU;AAElBF,EAAAA,IAAI,EAAE;AAFY,CAApB;AAKA,IAAIG,sBAAsB,GAAG,CAC3B,UAD2B,EAE3B,WAF2B,EAG3B,cAH2B,EAI3B,UAJ2B,EAK3B,cAL2B,EAM3B,YAN2B,EAO3B,YAP2B,EAQ3B,iBAR2B,EAS3B,gBAT2B,EAU3B,QAV2B,CAA7B,C,CAaA;;AACA,IAAIC,QAAQ,GAAG,UAASC,IAAT,EAAeC,kBAAf,EAAmCC,QAAnC,EAA6C;AAC1D,UAAQF,IAAI,CAACG,OAAL,CAAaC,gBAArB;AACE,SAAK,QAAL;AACEZ,MAAAA,MAAM,CAACO,QAAP,CAAgBE,kBAAhB,EAAoCC,QAApC;AACA;;AACF,SAAK,MAAL;AACE;AACA,UAAIG,WAAW,GAAG,EAAlB;;AACA,UAAIL,IAAI,CAACG,OAAL,CAAaG,oBAAjB,EAAuC;AACrCD,QAAAA,WAAW,CAACE,KAAZ,GAAoBP,IAAI,CAACG,OAAL,CAAaG,oBAAjC;AACD;;AACDX,MAAAA,IAAI,CAACa,OAAL,CAAaP,kBAAb,EAAiCI,WAAjC,EAA8CH,QAA9C;AACA;;AACF;AACE,YAAM,IAAIO,KAAJ,CACJ,2DACET,IAAI,CAACG,OAAL,CAAaC,gBADf,GAEE,IAHE,CAAN;AAbJ;AAmBD,CApBD,C,CAsBA;;;AACA,IAAIM,UAAU,GAAG,UAASC,YAAT,EAAuBC,cAAvB,EAAuCV,QAAvC,EAAiD;AAChE,MAAIS,YAAY,GAAG,CAAf,IAAoBA,YAAY,GAAGf,aAAa,CAACiB,MAArD,EAA6D;AAC3D,UAAM,IAAIJ,KAAJ,CACJ,6FACEE,YADF,GAEE,GAHE,CAAN;AAKD;;AACD,UAAQA,YAAR;AACE,SAAKf,aAAa,CAACC,MAAnB;AACEL,MAAAA,MAAM,CAACsB,UAAP,CAAkBF,cAAlB,EAAkCV,QAAlC;AACA;;AACF,SAAKN,aAAa,CAACD,IAAnB;AACEA,MAAAA,IAAI,CAACoB,OAAL,CAAaH,cAAb,EAA6BV,QAA7B;AACA;;AACF;AACEA,MAAAA,QAAQ,CAAC,IAAD,EAAOU,cAAP,CAAR;AARJ;AAUD,CAlBD;;AAoBAI,MAAM,CAACC,OAAP,GAAiB;AACfrB,EAAAA,aAAa,EAAEA,aADA;AAEfE,EAAAA,sBAAsB,EAAEA,sBAFT;AAGfC,EAAAA,QAAQ,EAAEA,QAHK;AAIfW,EAAAA,UAAU,EAAEA;AAJG,CAAjB","sourcesContent":["'use strict';\r\n\r\nvar Snappy = require('../connection/utils').retrieveSnappy(),\r\n  zlib = require('zlib');\r\n\r\nvar compressorIDs = {\r\n  snappy: 1,\r\n  zlib: 2\r\n};\r\n\r\nvar uncompressibleCommands = [\r\n  'ismaster',\r\n  'saslStart',\r\n  'saslContinue',\r\n  'getnonce',\r\n  'authenticate',\r\n  'createUser',\r\n  'updateUser',\r\n  'copydbSaslStart',\r\n  'copydbgetnonce',\r\n  'copydb'\r\n];\r\n\r\n// Facilitate compressing a message using an agreed compressor\r\nvar compress = function(self, dataToBeCompressed, callback) {\r\n  switch (self.options.agreedCompressor) {\r\n    case 'snappy':\r\n      Snappy.compress(dataToBeCompressed, callback);\r\n      break;\r\n    case 'zlib':\r\n      // Determine zlibCompressionLevel\r\n      var zlibOptions = {};\r\n      if (self.options.zlibCompressionLevel) {\r\n        zlibOptions.level = self.options.zlibCompressionLevel;\r\n      }\r\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback);\r\n      break;\r\n    default:\r\n      throw new Error(\r\n        'Attempt to compress message using unknown compressor \"' +\r\n          self.options.agreedCompressor +\r\n          '\".'\r\n      );\r\n  }\r\n};\r\n\r\n// Decompress a message using the given compressor\r\nvar decompress = function(compressorID, compressedData, callback) {\r\n  if (compressorID < 0 || compressorID > compressorIDs.length) {\r\n    throw new Error(\r\n      'Server sent message compressed using an unsupported compressor. (Received compressor ID ' +\r\n        compressorID +\r\n        ')'\r\n    );\r\n  }\r\n  switch (compressorID) {\r\n    case compressorIDs.snappy:\r\n      Snappy.uncompress(compressedData, callback);\r\n      break;\r\n    case compressorIDs.zlib:\r\n      zlib.inflate(compressedData, callback);\r\n      break;\r\n    default:\r\n      callback(null, compressedData);\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  compressorIDs: compressorIDs,\r\n  uncompressibleCommands: uncompressibleCommands,\r\n  compress: compress,\r\n  decompress: decompress\r\n};\r\n"]},"metadata":{},"sourceType":"script"}