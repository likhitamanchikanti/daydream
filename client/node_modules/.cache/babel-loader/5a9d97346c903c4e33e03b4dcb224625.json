{"ast":null,"code":"'use strict';\n\nconst inherits = require('util').inherits;\n\nconst f = require('util').format;\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst CoreCursor = require('../cursor').CoreCursor;\n\nconst Logger = require('../connection/logger');\n\nconst retrieveBSON = require('../connection/utils').retrieveBSON;\n\nconst MongoError = require('../error').MongoError;\n\nconst Server = require('./server');\n\nconst clone = require('./shared').clone;\n\nconst diff = require('./shared').diff;\n\nconst cloneOptions = require('./shared').cloneOptions;\n\nconst createClientInfo = require('./shared').createClientInfo;\n\nconst SessionMixins = require('./shared').SessionMixins;\n\nconst isRetryableWritesSupported = require('./shared').isRetryableWritesSupported;\n\nconst relayEvents = require('../utils').relayEvents;\n\nconst isRetryableError = require('../error').isRetryableError;\n\nconst BSON = retrieveBSON();\n\nconst getMMAPError = require('./shared').getMMAPError;\n/**\r\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\r\n * used to construct connections.\r\n */\n//\n// States\n\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    disconnected: [CONNECTING, DESTROYED, DISCONNECTED],\n    connecting: [CONNECTING, DESTROYED, CONNECTED, DISCONNECTED],\n    connected: [CONNECTED, DISCONNECTED, DESTROYED, UNREFERENCED],\n    unreferenced: [UNREFERENCED, DESTROYED],\n    destroyed: [DESTROYED]\n  }; // Get current state\n\n  var legalStates = legalTransitions[self.state];\n\n  if (legalStates && legalStates.indexOf(newState) !== -1) {\n    self.state = newState;\n  } else {\n    self.logger.error(f('Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]', self.id, self.state, newState, legalStates));\n  }\n} //\n// ReplSet instance id\n\n\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n/**\r\n * Creates a new Mongos instance\r\n * @class\r\n * @param {array} seedlist A list of seeds for the replicaset\r\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\r\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\r\n * @param {number} [options.size=5] Server connection pool size\r\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\r\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\r\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection\r\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\r\n * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting\r\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\r\n * @param {boolean} [options.ssl=false] Use SSL for connection\r\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\r\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\r\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\r\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\r\n * @param {Buffer} [options.key] SSL Key file binary buffer\r\n * @param {string} [options.passphrase] SSL Certificate pass phrase\r\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\r\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\r\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\r\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\r\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\r\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\r\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\r\n * @return {Mongos} A cursor instance\r\n * @fires Mongos#connect\r\n * @fires Mongos#reconnect\r\n * @fires Mongos#joined\r\n * @fires Mongos#left\r\n * @fires Mongos#failed\r\n * @fires Mongos#fullsetup\r\n * @fires Mongos#all\r\n * @fires Mongos#serverHeartbeatStarted\r\n * @fires Mongos#serverHeartbeatSucceeded\r\n * @fires Mongos#serverHeartbeatFailed\r\n * @fires Mongos#topologyOpening\r\n * @fires Mongos#topologyClosed\r\n * @fires Mongos#topologyDescriptionChanged\r\n * @property {string} type the topology type.\r\n * @property {string} parserType the parser type used (c++ or js).\r\n */\n\nvar Mongos = function (seedlist, options) {\n  options = options || {}; // Get replSet Id\n\n  this.id = id++; // Internal state\n\n  this.s = {\n    options: Object.assign({}, options),\n    // BSON instance\n    bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n    // Factory overrides\n    Cursor: options.cursorFactory || CoreCursor,\n    // Logger instance\n    logger: Logger('Mongos', options),\n    // Seedlist\n    seedlist: seedlist,\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug === 'boolean' ? options.debug : false,\n    // localThresholdMS\n    localThresholdMS: options.localThresholdMS || 15,\n    // Client info\n    clientInfo: createClientInfo(options)\n  }; // Set the client info\n\n  this.s.options.clientInfo = createClientInfo(options); // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n\n  if (this.s.logger.isWarn() && this.s.options.socketTimeout !== 0 && this.s.options.socketTimeout < this.s.haInterval) {\n    this.s.logger.warn(f('warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts', this.s.options.socketTimeout, this.s.haInterval));\n  } // Disconnected state\n\n\n  this.state = DISCONNECTED; // Current proxies we are connecting to\n\n  this.connectingProxies = []; // Currently connected proxies\n\n  this.connectedProxies = []; // Disconnected proxies\n\n  this.disconnectedProxies = []; // Index of proxy to run operations against\n\n  this.index = 0; // High availability timeout id\n\n  this.haTimeoutId = null; // Last ismaster\n\n  this.ismaster = null; // Description of the Replicaset\n\n  this.topologyDescription = {\n    topologyType: 'Unknown',\n    servers: []\n  }; // Highest clusterTime seen in responses from the current deployment\n\n  this.clusterTime = null; // Add event listener\n\n  EventEmitter.call(this);\n};\n\ninherits(Mongos, EventEmitter);\nObject.assign(Mongos.prototype, SessionMixins);\nObject.defineProperty(Mongos.prototype, 'type', {\n  enumerable: true,\n  get: function () {\n    return 'mongos';\n  }\n});\nObject.defineProperty(Mongos.prototype, 'parserType', {\n  enumerable: true,\n  get: function () {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\nObject.defineProperty(Mongos.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function () {\n    if (!this.ismaster) return null;\n    return this.ismaster.logicalSessionTimeoutMinutes || null;\n  }\n});\n/**\r\n * Emit event if it exists\r\n * @method\r\n */\n\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\nconst SERVER_EVENTS = ['serverDescriptionChanged', 'error', 'close', 'timeout', 'parseError'];\n\nfunction destroyServer(server, options, callback) {\n  options = options || {};\n  SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n  server.destroy(options, callback);\n}\n/**\r\n * Initiate server connect\r\n */\n\n\nMongos.prototype.connect = function (options) {\n  var self = this; // Add any connect level options to the internal state\n\n  this.s.connectOptions = options || {}; // Set connecting state\n\n  stateTransition(this, CONNECTING); // Create server instances\n\n  var servers = this.s.seedlist.map(function (x) {\n    const server = new Server(Object.assign({}, self.s.options, x, options, {\n      reconnect: false,\n      monitoring: false,\n      parent: self,\n      clientInfo: clone(self.s.clientInfo)\n    }));\n    relayEvents(server, self, ['serverDescriptionChanged']);\n    return server;\n  }); // Emit the topology opening event\n\n  emitSDAMEvent(this, 'topologyOpening', {\n    topologyId: this.id\n  }); // Start all server connections\n\n  connectProxies(self, servers);\n};\n/**\r\n * Authenticate the topology.\r\n * @method\r\n * @param {MongoCredentials} credentials The credentials for authentication we are using\r\n * @param {authResultCallback} callback A callback function\r\n */\n\n\nMongos.prototype.auth = function (credentials, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n\nfunction handleEvent(self) {\n  return function () {\n    if (self.state === DESTROYED) return; // Move to list of disconnectedProxies\n\n    moveServerFrom(self.connectedProxies, self.disconnectedProxies, this); // Emit the initial topology\n\n    emitTopologyDescriptionChanged(self); // Emit the left signal\n\n    self.emit('left', 'mongos', this); // Emit the sdam event\n\n    self.emit('serverClosed', {\n      topologyId: self.id,\n      address: this.name\n    });\n  };\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function () {\n    var _this = this; // Destroy the instance\n\n\n    if (self.state === DESTROYED) {\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self); // Move from connectingProxies\n\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      return this.destroy();\n    } // Check the type of server\n\n\n    if (event === 'connect') {\n      // Get last known ismaster\n      self.ismaster = _this.lastIsMaster(); // Is this not a proxy, remove t\n\n      if (self.ismaster.msg === 'isdbgrid') {\n        // Add to the connectd list\n        for (let i = 0; i < self.connectedProxies.length; i++) {\n          if (self.connectedProxies[i].name === _this.name) {\n            // Move from connectingProxies\n            moveServerFrom(self.connectingProxies, self.disconnectedProxies, _this); // Emit the initial topology\n\n            emitTopologyDescriptionChanged(self);\n\n            _this.destroy();\n\n            return self.emit('failed', _this);\n          }\n        } // Remove the handlers\n\n\n        for (let i = 0; i < handlers.length; i++) {\n          _this.removeAllListeners(handlers[i]);\n        } // Add stable state handlers\n\n\n        _this.on('error', handleEvent(self, 'error'));\n\n        _this.on('close', handleEvent(self, 'close'));\n\n        _this.on('timeout', handleEvent(self, 'timeout'));\n\n        _this.on('parseError', handleEvent(self, 'parseError')); // Move from connecting proxies connected\n\n\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _this); // Emit the joined event\n\n        self.emit('joined', 'mongos', _this);\n      } else {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          var message = 'expected mongos proxy, but found replicaset member mongod for server %s'; // We have a standalone server\n\n          if (!self.ismaster.hosts) {\n            message = 'expected mongos proxy, but found standalone mongod for server %s';\n          }\n\n          self.s.logger.warn(f(message, _this.name));\n        } // This is not a mongos proxy, remove it completely\n\n\n        removeProxyFrom(self.connectingProxies, _this); // Emit the left event\n\n        self.emit('left', 'server', _this); // Emit failed event\n\n        self.emit('failed', _this);\n      }\n    } else {\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this); // Emit the left event\n\n      self.emit('left', 'mongos', this); // Emit failed event\n\n      self.emit('failed', this);\n    } // Emit the initial topology\n\n\n    emitTopologyDescriptionChanged(self); // Trigger topologyMonitor\n\n    if (self.connectingProxies.length === 0) {\n      // Emit connected if we are connected\n      if (self.connectedProxies.length > 0 && self.state === CONNECTING) {\n        // Set the state to connected\n        stateTransition(self, CONNECTED); // Emit the connect event\n\n        self.emit('connect', self);\n        self.emit('fullsetup', self);\n        self.emit('all', self);\n      } else if (self.disconnectedProxies.length === 0) {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          self.s.logger.warn(f('no mongos proxies found in seed list, did you mean to connect to a replicaset'));\n        } // Emit the error that no proxies were found\n\n\n        return self.emit('error', new MongoError('no mongos proxies found in seed list'));\n      } // Topology monitor\n\n\n      topologyMonitor(self, {\n        firstConnect: true\n      });\n    }\n  };\n}\n\nfunction connectProxies(self, servers) {\n  // Update connectingProxies\n  self.connectingProxies = self.connectingProxies.concat(servers); // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function () {\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: self.id,\n        address: server.name\n      }); // Emit the initial topology\n\n      emitTopologyDescriptionChanged(self); // Add event handlers\n\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect')); // Command Monitoring events\n\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']); // Start connection\n\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  } // Start all the servers\n\n\n  while (servers.length > 0) {\n    connect(servers.shift(), timeoutInterval++);\n  }\n}\n\nfunction pickProxy(self, session) {\n  // TODO: Destructure :)\n  const transaction = session && session.transaction;\n\n  if (transaction && transaction.server) {\n    if (transaction.server.isConnected()) {\n      return transaction.server;\n    } else {\n      transaction.unpinServer();\n    }\n  } // Get the currently connected Proxies\n\n\n  var connectedProxies = self.connectedProxies.slice(0); // Set lower bound\n\n  var lowerBoundLatency = Number.MAX_VALUE; // Determine the lower bound for the Proxies\n\n  for (var i = 0; i < connectedProxies.length; i++) {\n    if (connectedProxies[i].lastIsMasterMS < lowerBoundLatency) {\n      lowerBoundLatency = connectedProxies[i].lastIsMasterMS;\n    }\n  } // Filter out the possible servers\n\n\n  connectedProxies = connectedProxies.filter(function (server) {\n    if (server.lastIsMasterMS <= lowerBoundLatency + self.s.localThresholdMS && server.isConnected()) {\n      return true;\n    }\n  });\n  let proxy; // We have no connectedProxies pick first of the connected ones\n\n  if (connectedProxies.length === 0) {\n    proxy = self.connectedProxies[0];\n  } else {\n    // Get proxy\n    proxy = connectedProxies[self.index % connectedProxies.length]; // Update the index\n\n    self.index = (self.index + 1) % connectedProxies.length;\n  }\n\n  if (transaction && transaction.isActive && proxy && proxy.isConnected()) {\n    transaction.pinServer(proxy);\n  } // Return the proxy\n\n\n  return proxy;\n}\n\nfunction moveServerFrom(from, to, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n\n  for (i = 0; i < to.length; i++) {\n    if (to[i].name === proxy.name) {\n      to.splice(i, 1);\n    }\n  }\n\n  to.push(proxy);\n}\n\nfunction removeProxyFrom(from, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n}\n\nfunction reconnectProxies(self, proxies, callback) {\n  // Count lefts\n  var count = proxies.length; // Handle events\n\n  var _handleEvent = function (self, event) {\n    return function () {\n      var _self = this;\n\n      count = count - 1; // Destroyed\n\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        return this.destroy();\n      }\n\n      if (event === 'connect') {\n        // Destroyed\n        if (self.state === DESTROYED || self.state === UNREFERENCED) {\n          moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n          return _self.destroy();\n        } // Remove the handlers\n\n\n        for (var i = 0; i < handlers.length; i++) {\n          _self.removeAllListeners(handlers[i]);\n        } // Add stable state handlers\n\n\n        _self.on('error', handleEvent(self, 'error'));\n\n        _self.on('close', handleEvent(self, 'close'));\n\n        _self.on('timeout', handleEvent(self, 'timeout'));\n\n        _self.on('parseError', handleEvent(self, 'parseError')); // Move to the connected servers\n\n\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _self); // Emit topology Change\n\n        emitTopologyDescriptionChanged(self); // Emit joined event\n\n        self.emit('joined', 'mongos', _self);\n      } else {\n        // Move from connectingProxies\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        this.destroy();\n      } // Are we done finish up callback\n\n\n      if (count === 0) {\n        callback();\n      }\n    };\n  }; // No new servers\n\n\n  if (count === 0) {\n    return callback();\n  } // Execute method\n\n\n  function execute(_server, i) {\n    setTimeout(function () {\n      // Destroyed\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        return;\n      } // Create a new server instance\n\n\n      var server = new Server(Object.assign({}, self.s.options, {\n        host: _server.name.split(':')[0],\n        port: parseInt(_server.name.split(':')[1], 10),\n        reconnect: false,\n        monitoring: false,\n        parent: self,\n        clientInfo: clone(self.s.clientInfo)\n      }));\n      destroyServer(_server);\n      removeProxyFrom(self.disconnectedProxies, _server); // Relay the server description change\n\n      relayEvents(server, self, ['serverDescriptionChanged']); // Emit opening server event\n\n      self.emit('serverOpening', {\n        topologyId: server.s.topologyId !== -1 ? server.s.topologyId : self.id,\n        address: server.name\n      }); // Add temp handlers\n\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError')); // Command Monitoring events\n\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']); // Connect to proxy\n\n      self.connectingProxies.push(server);\n      server.connect(self.s.connectOptions);\n    }, i);\n  } // Create new instances\n\n\n  for (var i = 0; i < proxies.length; i++) {\n    execute(proxies[i], i);\n  }\n}\n\nfunction topologyMonitor(self, options) {\n  options = options || {}; // Set momitoring timeout\n\n  self.haTimeoutId = setTimeout(function () {\n    if (self.state === DESTROYED || self.state === UNREFERENCED) return; // If we have a primary and a disconnect handler, execute\n    // buffered operations\n\n    if (self.isConnected() && self.s.disconnectHandler) {\n      self.s.disconnectHandler.execute();\n    } // Get the connectingServers\n\n\n    var proxies = self.connectedProxies.slice(0); // Get the count\n\n    var count = proxies.length; // If the count is zero schedule a new fast\n\n    function pingServer(_self, _server, cb) {\n      // Measure running time\n      var start = new Date().getTime(); // Emit the server heartbeat start\n\n      emitSDAMEvent(self, 'serverHeartbeatStarted', {\n        connectionId: _server.name\n      }); // Execute ismaster\n\n      _server.command('admin.$cmd', {\n        ismaster: true\n      }, {\n        monitoring: true,\n        socketTimeout: self.s.options.connectionTimeout || 2000\n      }, function (err, r) {\n        if (self.state === DESTROYED || self.state === UNREFERENCED) {\n          // Move from connectingProxies\n          moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n\n          _server.destroy();\n\n          return cb(err, r);\n        } // Calculate latency\n\n\n        var latencyMS = new Date().getTime() - start; // We had an error, remove it from the state\n\n        if (err) {\n          // Emit the server heartbeat failure\n          emitSDAMEvent(self, 'serverHeartbeatFailed', {\n            durationMS: latencyMS,\n            failure: err,\n            connectionId: _server.name\n          }); // Move from connected proxies to disconnected proxies\n\n          moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n        } else {\n          // Update the server ismaster\n          _server.ismaster = r.result;\n          _server.lastIsMasterMS = latencyMS; // Server heart beat event\n\n          emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n            durationMS: latencyMS,\n            reply: r.result,\n            connectionId: _server.name\n          });\n        }\n\n        cb(err, r);\n      });\n    } // No proxies initiate monitor again\n\n\n    if (proxies.length === 0) {\n      // Emit close event if any listeners registered\n      if (self.listeners('close').length > 0 && self.state === CONNECTING) {\n        self.emit('error', new MongoError('no mongos proxy available'));\n      } else {\n        self.emit('close', self);\n      } // Attempt to connect to any unknown servers\n\n\n      return reconnectProxies(self, self.disconnectedProxies, function () {\n        if (self.state === DESTROYED || self.state === UNREFERENCED) return; // Are we connected ? emit connect event\n\n        if (self.state === CONNECTING && options.firstConnect) {\n          self.emit('connect', self);\n          self.emit('fullsetup', self);\n          self.emit('all', self);\n        } else if (self.isConnected()) {\n          self.emit('reconnect', self);\n        } else if (!self.isConnected() && self.listeners('close').length > 0) {\n          self.emit('close', self);\n        } // Perform topology monitor\n\n\n        topologyMonitor(self);\n      });\n    } // Ping all servers\n\n\n    for (var i = 0; i < proxies.length; i++) {\n      pingServer(self, proxies[i], function () {\n        count = count - 1;\n\n        if (count === 0) {\n          if (self.state === DESTROYED || self.state === UNREFERENCED) return; // Attempt to connect to any unknown servers\n\n          reconnectProxies(self, self.disconnectedProxies, function () {\n            if (self.state === DESTROYED || self.state === UNREFERENCED) return; // Perform topology monitor\n\n            topologyMonitor(self);\n          });\n        }\n      });\n    }\n  }, self.s.haInterval);\n}\n/**\r\n * Returns the last known ismaster document for this server\r\n * @method\r\n * @return {object}\r\n */\n\n\nMongos.prototype.lastIsMaster = function () {\n  return this.ismaster;\n};\n/**\r\n * Unref all connections belong to this server\r\n * @method\r\n */\n\n\nMongos.prototype.unref = function () {\n  // Transition state\n  stateTransition(this, UNREFERENCED); // Get all proxies\n\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\n  proxies.forEach(function (x) {\n    x.unref();\n  });\n  clearTimeout(this.haTimeoutId);\n};\n/**\r\n * Destroy the server connection\r\n * @param {boolean} [options.force=false] Force destroy the pool\r\n * @method\r\n */\n\n\nMongos.prototype.destroy = function (options, callback) {\n  if (this.haTimeoutId) {\n    clearTimeout(this.haTimeoutId);\n  }\n\n  const proxies = this.connectedProxies.concat(this.connectingProxies);\n  let serverCount = proxies.length;\n\n  const serverDestroyed = () => {\n    serverCount--;\n\n    if (serverCount > 0) {\n      return;\n    }\n\n    emitTopologyDescriptionChanged(this);\n    emitSDAMEvent(this, 'topologyClosed', {\n      topologyId: this.id\n    });\n    stateTransition(this, DESTROYED);\n\n    if (typeof callback === 'function') {\n      callback(null, null);\n    }\n  };\n\n  if (serverCount === 0) {\n    serverDestroyed();\n    return;\n  } // Destroy all connecting servers\n\n\n  proxies.forEach(server => {\n    // Emit the sdam event\n    this.emit('serverClosed', {\n      topologyId: this.id,\n      address: server.name\n    });\n    destroyServer(server, options, serverDestroyed);\n    moveServerFrom(this.connectedProxies, this.disconnectedProxies, server);\n  });\n};\n/**\r\n * Figure out if the server is connected\r\n * @method\r\n * @return {boolean}\r\n */\n\n\nMongos.prototype.isConnected = function () {\n  return this.connectedProxies.length > 0;\n};\n/**\r\n * Figure out if the server instance was destroyed by calling destroy\r\n * @method\r\n * @return {boolean}\r\n */\n\n\nMongos.prototype.isDestroyed = function () {\n  return this.state === DESTROYED;\n}; //\n// Operations\n//\n\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {}; // TODO: once we drop Node 4, use destructuring either here or in arguments.\n\n  const self = args.self;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops; // Pick a server\n\n  let server = pickProxy(self, options.session); // No server found error out\n\n  if (!server) return callback(new MongoError('no mongos proxy available'));\n  const willRetryWrite = !args.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(self) && !options.session.inTransaction();\n\n  const handler = (err, result) => {\n    if (!err) return callback(null, result);\n\n    if (!isRetryableError(err) || !willRetryWrite) {\n      err = getMMAPError(err);\n      return callback(err);\n    } // Pick another server\n\n\n    server = pickProxy(self, options.session); // No server found error out with original error\n\n    if (!server) {\n      return callback(err);\n    }\n\n    const newArgs = Object.assign({}, args, {\n      retrying: true\n    });\n    return executeWriteOperation(newArgs, options, callback);\n  };\n\n  if (callback.operationId) {\n    handler.operationId = callback.operationId;\n  } // increment and assign txnNumber\n\n\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  } // rerun the operation\n\n\n  server[op](ns, ops, options, handler);\n}\n/**\r\n * Insert one or more documents\r\n * @method\r\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n * @param {array} ops An array of documents to insert\r\n * @param {boolean} [options.ordered=true] Execute in order or out of order\r\n * @param {object} [options.writeConcern={}] Write concern for the operation\r\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n * @param {ClientSession} [options.session=null] Session to use for the operation\r\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\r\n * @param {opResultCallback} callback A callback function\r\n */\n\n\nMongos.prototype.insert = function (ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n\n  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed'))); // Not connected but we have a disconnecthandler\n\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  } // No mongos proxy available\n\n\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Execute write operation\n\n\n  executeWriteOperation({\n    self: this,\n    op: 'insert',\n    ns,\n    ops\n  }, options, callback);\n};\n/**\r\n * Perform one or more update operations\r\n * @method\r\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n * @param {array} ops An array of updates\r\n * @param {boolean} [options.ordered=true] Execute in order or out of order\r\n * @param {object} [options.writeConcern={}] Write concern for the operation\r\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n * @param {ClientSession} [options.session=null] Session to use for the operation\r\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\r\n * @param {opResultCallback} callback A callback function\r\n */\n\n\nMongos.prototype.update = function (ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n\n  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed'))); // Not connected but we have a disconnecthandler\n\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  } // No mongos proxy available\n\n\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Execute write operation\n\n\n  executeWriteOperation({\n    self: this,\n    op: 'update',\n    ns,\n    ops\n  }, options, callback);\n};\n/**\r\n * Perform one or more remove operations\r\n * @method\r\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n * @param {array} ops An array of removes\r\n * @param {boolean} [options.ordered=true] Execute in order or out of order\r\n * @param {object} [options.writeConcern={}] Write concern for the operation\r\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n * @param {ClientSession} [options.session=null] Session to use for the operation\r\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\r\n * @param {opResultCallback} callback A callback function\r\n */\n\n\nMongos.prototype.remove = function (ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n\n  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed'))); // Not connected but we have a disconnecthandler\n\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  } // No mongos proxy available\n\n\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Execute write operation\n\n\n  executeWriteOperation({\n    self: this,\n    op: 'remove',\n    ns,\n    ops\n  }, options, callback);\n};\n\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\n\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n/**\r\n * Execute a command\r\n * @method\r\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n * @param {object} cmd The command hash\r\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\r\n * @param {Connection} [options.connection] Specify connection object to execute command against\r\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n * @param {ClientSession} [options.session=null] Session to use for the operation\r\n * @param {opResultCallback} callback A callback function\r\n */\n\n\nMongos.prototype.command = function (ns, cmd, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n\n  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  var self = this; // Pick a proxy\n\n  var server = pickProxy(self, options.session); // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n\n  if ((server == null || !server.isConnected()) && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  } // No server returned we had an error\n\n\n  if (server == null) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Cloned options\n\n\n  var clonedOptions = cloneOptions(options);\n  clonedOptions.topology = self;\n  const willRetryWrite = !options.retrying && options.retryWrites && options.session && isRetryableWritesSupported(self) && !options.session.inTransaction() && isWriteCommand(cmd);\n\n  const cb = (err, result) => {\n    if (!err) return callback(null, result);\n\n    if (!isRetryableError(err)) {\n      return callback(err);\n    }\n\n    if (willRetryWrite) {\n      const newOptions = Object.assign({}, clonedOptions, {\n        retrying: true\n      });\n      return this.command(ns, cmd, newOptions, callback);\n    }\n\n    return callback(err);\n  }; // increment and assign txnNumber\n\n\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  } // Execute the command\n\n\n  server.command(ns, cmd, clonedOptions, cb);\n};\n/**\r\n * Get a new cursor\r\n * @method\r\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\r\n * @param {object} [options] Options for the cursor\r\n * @param {object} [options.batchSize=0] Batchsize for the operation\r\n * @param {array} [options.documents=[]] Initial documents list for cursor\r\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\r\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n * @param {ClientSession} [options.session=null] Session to use for the operation\r\n * @param {object} [options.topology] The internal topology of the created cursor\r\n * @returns {Cursor}\r\n */\n\n\nMongos.prototype.cursor = function (ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this; // Set up final cursor type\n\n  var FinalCursor = options.cursorFactory || this.s.Cursor; // Return the cursor\n\n  return new FinalCursor(topology, ns, cmd, options);\n};\n/**\r\n * Selects a server\r\n *\r\n * @method\r\n * @param {function} selector Unused\r\n * @param {ReadPreference} [options.readPreference] Unused\r\n * @param {ClientSession} [options.session] Specify a session if it is being used\r\n * @param {function} callback\r\n */\n\n\nMongos.prototype.selectServer = function (selector, options, callback) {\n  if (typeof selector === 'function' && typeof callback === 'undefined') callback = selector, selector = undefined, options = {};\n  if (typeof options === 'function') callback = options, options = selector, selector = undefined;\n  options = options || {};\n  const server = pickProxy(this, options.session);\n\n  if (server == null) {\n    callback(new MongoError('server selection failed'));\n    return;\n  }\n\n  if (this.s.debug) this.emit('pickedServer', null, server);\n  callback(null, server);\n};\n/**\r\n * All raw connections\r\n * @method\r\n * @return {Connection[]}\r\n */\n\n\nMongos.prototype.connections = function () {\n  var connections = [];\n\n  for (var i = 0; i < this.connectedProxies.length; i++) {\n    connections = connections.concat(this.connectedProxies[i].connections());\n  }\n\n  return connections;\n};\n\nfunction emitTopologyDescriptionChanged(self) {\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\n    var topology = 'Unknown';\n\n    if (self.connectedProxies.length > 0) {\n      topology = 'Sharded';\n    } // Generate description\n\n\n    var description = {\n      topologyType: topology,\n      servers: []\n    }; // All proxies\n\n    var proxies = self.disconnectedProxies.concat(self.connectingProxies); // Add all the disconnected proxies\n\n    description.servers = description.servers.concat(proxies.map(function (x) {\n      var description = x.getDescription();\n      description.type = 'Unknown';\n      return description;\n    })); // Add all the connected proxies\n\n    description.servers = description.servers.concat(self.connectedProxies.map(function (x) {\n      var description = x.getDescription();\n      description.type = 'Mongos';\n      return description;\n    })); // Get the diff\n\n    var diffResult = diff(self.topologyDescription, description); // Create the result\n\n    var result = {\n      topologyId: self.id,\n      previousDescription: self.topologyDescription,\n      newDescription: description,\n      diff: diffResult\n    }; // Emit the topologyDescription change\n\n    if (diffResult.servers.length > 0) {\n      self.emit('topologyDescriptionChanged', result);\n    } // Set the new description\n\n\n    self.topologyDescription = description;\n  }\n}\n/**\r\n * A mongos connect event, used to verify that the connection is up and running\r\n *\r\n * @event Mongos#connect\r\n * @type {Mongos}\r\n */\n\n/**\r\n * A mongos reconnect event, used to verify that the mongos topology has reconnected\r\n *\r\n * @event Mongos#reconnect\r\n * @type {Mongos}\r\n */\n\n/**\r\n * A mongos fullsetup event, used to signal that all topology members have been contacted.\r\n *\r\n * @event Mongos#fullsetup\r\n * @type {Mongos}\r\n */\n\n/**\r\n * A mongos all event, used to signal that all topology members have been contacted.\r\n *\r\n * @event Mongos#all\r\n * @type {Mongos}\r\n */\n\n/**\r\n * A server member left the mongos list\r\n *\r\n * @event Mongos#left\r\n * @type {Mongos}\r\n * @param {string} type The type of member that left (mongos)\r\n * @param {Server} server The server object that left\r\n */\n\n/**\r\n * A server member joined the mongos list\r\n *\r\n * @event Mongos#joined\r\n * @type {Mongos}\r\n * @param {string} type The type of member that left (mongos)\r\n * @param {Server} server The server object that joined\r\n */\n\n/**\r\n * A server opening SDAM monitoring event\r\n *\r\n * @event Mongos#serverOpening\r\n * @type {object}\r\n */\n\n/**\r\n * A server closed SDAM monitoring event\r\n *\r\n * @event Mongos#serverClosed\r\n * @type {object}\r\n */\n\n/**\r\n * A server description SDAM change monitoring event\r\n *\r\n * @event Mongos#serverDescriptionChanged\r\n * @type {object}\r\n */\n\n/**\r\n * A topology open SDAM event\r\n *\r\n * @event Mongos#topologyOpening\r\n * @type {object}\r\n */\n\n/**\r\n * A topology closed SDAM event\r\n *\r\n * @event Mongos#topologyClosed\r\n * @type {object}\r\n */\n\n/**\r\n * A topology structure SDAM change event\r\n *\r\n * @event Mongos#topologyDescriptionChanged\r\n * @type {object}\r\n */\n\n/**\r\n * A topology serverHeartbeatStarted SDAM event\r\n *\r\n * @event Mongos#serverHeartbeatStarted\r\n * @type {object}\r\n */\n\n/**\r\n * A topology serverHeartbeatFailed SDAM event\r\n *\r\n * @event Mongos#serverHeartbeatFailed\r\n * @type {object}\r\n */\n\n/**\r\n * A topology serverHeartbeatSucceeded SDAM change event\r\n *\r\n * @event Mongos#serverHeartbeatSucceeded\r\n * @type {object}\r\n */\n\n/**\r\n * An event emitted indicating a command was started, if command monitoring is enabled\r\n *\r\n * @event Mongos#commandStarted\r\n * @type {object}\r\n */\n\n/**\r\n * An event emitted indicating a command succeeded, if command monitoring is enabled\r\n *\r\n * @event Mongos#commandSucceeded\r\n * @type {object}\r\n */\n\n/**\r\n * An event emitted indicating a command failed, if command monitoring is enabled\r\n *\r\n * @event Mongos#commandFailed\r\n * @type {object}\r\n */\n\n\nmodule.exports = Mongos;","map":{"version":3,"sources":["C:/Users/mehta/daydream/node_modules/mongodb/lib/core/topologies/mongos.js"],"names":["inherits","require","f","format","EventEmitter","CoreCursor","Logger","retrieveBSON","MongoError","Server","clone","diff","cloneOptions","createClientInfo","SessionMixins","isRetryableWritesSupported","relayEvents","isRetryableError","BSON","getMMAPError","DISCONNECTED","CONNECTING","CONNECTED","UNREFERENCED","DESTROYED","stateTransition","self","newState","legalTransitions","disconnected","connecting","connected","unreferenced","destroyed","legalStates","state","indexOf","logger","error","id","handlers","Mongos","seedlist","options","s","Object","assign","bson","Binary","Code","DBRef","Decimal128","Double","Int32","Long","Map","MaxKey","MinKey","ObjectId","BSONRegExp","Symbol","Timestamp","Cursor","cursorFactory","haInterval","disconnectHandler","index","connectOptions","debug","localThresholdMS","clientInfo","isWarn","socketTimeout","warn","connectingProxies","connectedProxies","disconnectedProxies","haTimeoutId","ismaster","topologyDescription","topologyType","servers","clusterTime","call","prototype","defineProperty","enumerable","get","native","logicalSessionTimeoutMinutes","emitSDAMEvent","event","description","listeners","length","emit","SERVER_EVENTS","destroyServer","server","callback","forEach","removeAllListeners","destroy","connect","map","x","reconnect","monitoring","parent","topologyId","connectProxies","auth","credentials","handleEvent","moveServerFrom","emitTopologyDescriptionChanged","address","name","handleInitialConnectEvent","_this","lastIsMaster","msg","i","on","message","hosts","removeProxyFrom","topologyMonitor","firstConnect","concat","timeoutInterval","setTimeout","once","shift","pickProxy","session","transaction","isConnected","unpinServer","slice","lowerBoundLatency","Number","MAX_VALUE","lastIsMasterMS","filter","proxy","isActive","pinServer","from","to","splice","push","reconnectProxies","proxies","count","_handleEvent","_self","execute","_server","host","split","port","parseInt","pingServer","cb","start","Date","getTime","connectionId","command","connectionTimeout","err","r","latencyMS","durationMS","failure","result","reply","unref","clearTimeout","serverCount","serverDestroyed","isDestroyed","executeWriteOperation","args","op","ns","ops","willRetryWrite","retrying","retryWrites","inTransaction","handler","newArgs","operationId","incrementTransactionNumber","insert","add","update","remove","RETRYABLE_WRITE_OPERATIONS","isWriteCommand","some","cmd","clonedOptions","topology","newOptions","cursor","FinalCursor","selectServer","selector","undefined","connections","getDescription","type","diffResult","previousDescription","newDescription","module","exports"],"mappings":"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H,MAAAA,WAAW,CAAC0H,IAAZ,GAAmB,QAAnB;AACA,aAAO1H,WAAP;AACD,KAJD,CADoB,CAAtB,CAzB2D,CAiC3D;;AACA,QAAI2H,UAAU,GAAG5M,IAAI,CAACe,IAAI,CAACqD,mBAAN,EAA2Ba,WAA3B,CAArB,CAlC2D,CAoC3D;;AACA,QAAIoF,MAAM,GAAG;AACXnE,MAAAA,UAAU,EAAEnF,IAAI,CAACa,EADN;AAEXiL,MAAAA,mBAAmB,EAAE9L,IAAI,CAACqD,mBAFf;AAGX0I,MAAAA,cAAc,EAAE7H,WAHL;AAIXjF,MAAAA,IAAI,EAAE4M;AAJK,KAAb,CArC2D,CA4C3D;;AACA,QAAIA,UAAU,CAACtI,OAAX,CAAmBa,MAAnB,GAA4B,CAAhC,EAAmC;AACjCpE,MAAAA,IAAI,CAACqE,IAAL,CAAU,4BAAV,EAAwCiF,MAAxC;AACD,KA/C0D,CAiD3D;;;AACAtJ,IAAAA,IAAI,CAACqD,mBAAL,GAA2Ba,WAA3B;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA8H,MAAM,CAACC,OAAP,GAAiBlL,MAAjB","sourcesContent":["'use strict';\r\n\r\nconst inherits = require('util').inherits;\r\nconst f = require('util').format;\r\nconst EventEmitter = require('events').EventEmitter;\r\nconst CoreCursor = require('../cursor').CoreCursor;\r\nconst Logger = require('../connection/logger');\r\nconst retrieveBSON = require('../connection/utils').retrieveBSON;\r\nconst MongoError = require('../error').MongoError;\r\nconst Server = require('./server');\r\nconst clone = require('./shared').clone;\r\nconst diff = require('./shared').diff;\r\nconst cloneOptions = require('./shared').cloneOptions;\r\nconst createClientInfo = require('./shared').createClientInfo;\r\nconst SessionMixins = require('./shared').SessionMixins;\r\nconst isRetryableWritesSupported = require('./shared').isRetryableWritesSupported;\r\nconst relayEvents = require('../utils').relayEvents;\r\nconst isRetryableError = require('../error').isRetryableError;\r\nconst BSON = retrieveBSON();\r\nconst getMMAPError = require('./shared').getMMAPError;\r\n\r\n/**\r\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\r\n * used to construct connections.\r\n */\r\n\r\n//\r\n// States\r\nvar DISCONNECTED = 'disconnected';\r\nvar CONNECTING = 'connecting';\r\nvar CONNECTED = 'connected';\r\nvar UNREFERENCED = 'unreferenced';\r\nvar DESTROYED = 'destroyed';\r\n\r\nfunction stateTransition(self, newState) {\r\n  var legalTransitions = {\r\n    disconnected: [CONNECTING, DESTROYED, DISCONNECTED],\r\n    connecting: [CONNECTING, DESTROYED, CONNECTED, DISCONNECTED],\r\n    connected: [CONNECTED, DISCONNECTED, DESTROYED, UNREFERENCED],\r\n    unreferenced: [UNREFERENCED, DESTROYED],\r\n    destroyed: [DESTROYED]\r\n  };\r\n\r\n  // Get current state\r\n  var legalStates = legalTransitions[self.state];\r\n  if (legalStates && legalStates.indexOf(newState) !== -1) {\r\n    self.state = newState;\r\n  } else {\r\n    self.logger.error(\r\n      f(\r\n        'Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]',\r\n        self.id,\r\n        self.state,\r\n        newState,\r\n        legalStates\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\n//\r\n// ReplSet instance id\r\nvar id = 1;\r\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\r\n\r\n/**\r\n * Creates a new Mongos instance\r\n * @class\r\n * @param {array} seedlist A list of seeds for the replicaset\r\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\r\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\r\n * @param {number} [options.size=5] Server connection pool size\r\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\r\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\r\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection\r\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\r\n * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting\r\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\r\n * @param {boolean} [options.ssl=false] Use SSL for connection\r\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\r\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\r\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\r\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\r\n * @param {Buffer} [options.key] SSL Key file binary buffer\r\n * @param {string} [options.passphrase] SSL Certificate pass phrase\r\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\r\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\r\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\r\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\r\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\r\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\r\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\r\n * @return {Mongos} A cursor instance\r\n * @fires Mongos#connect\r\n * @fires Mongos#reconnect\r\n * @fires Mongos#joined\r\n * @fires Mongos#left\r\n * @fires Mongos#failed\r\n * @fires Mongos#fullsetup\r\n * @fires Mongos#all\r\n * @fires Mongos#serverHeartbeatStarted\r\n * @fires Mongos#serverHeartbeatSucceeded\r\n * @fires Mongos#serverHeartbeatFailed\r\n * @fires Mongos#topologyOpening\r\n * @fires Mongos#topologyClosed\r\n * @fires Mongos#topologyDescriptionChanged\r\n * @property {string} type the topology type.\r\n * @property {string} parserType the parser type used (c++ or js).\r\n */\r\nvar Mongos = function(seedlist, options) {\r\n  options = options || {};\r\n\r\n  // Get replSet Id\r\n  this.id = id++;\r\n\r\n  // Internal state\r\n  this.s = {\r\n    options: Object.assign({}, options),\r\n    // BSON instance\r\n    bson:\r\n      options.bson ||\r\n      new BSON([\r\n        BSON.Binary,\r\n        BSON.Code,\r\n        BSON.DBRef,\r\n        BSON.Decimal128,\r\n        BSON.Double,\r\n        BSON.Int32,\r\n        BSON.Long,\r\n        BSON.Map,\r\n        BSON.MaxKey,\r\n        BSON.MinKey,\r\n        BSON.ObjectId,\r\n        BSON.BSONRegExp,\r\n        BSON.Symbol,\r\n        BSON.Timestamp\r\n      ]),\r\n    // Factory overrides\r\n    Cursor: options.cursorFactory || CoreCursor,\r\n    // Logger instance\r\n    logger: Logger('Mongos', options),\r\n    // Seedlist\r\n    seedlist: seedlist,\r\n    // Ha interval\r\n    haInterval: options.haInterval ? options.haInterval : 10000,\r\n    // Disconnect handler\r\n    disconnectHandler: options.disconnectHandler,\r\n    // Server selection index\r\n    index: 0,\r\n    // Connect function options passed in\r\n    connectOptions: {},\r\n    // Are we running in debug mode\r\n    debug: typeof options.debug === 'boolean' ? options.debug : false,\r\n    // localThresholdMS\r\n    localThresholdMS: options.localThresholdMS || 15,\r\n    // Client info\r\n    clientInfo: createClientInfo(options)\r\n  };\r\n\r\n  // Set the client info\r\n  this.s.options.clientInfo = createClientInfo(options);\r\n\r\n  // Log info warning if the socketTimeout < haInterval as it will cause\r\n  // a lot of recycled connections to happen.\r\n  if (\r\n    this.s.logger.isWarn() &&\r\n    this.s.options.socketTimeout !== 0 &&\r\n    this.s.options.socketTimeout < this.s.haInterval\r\n  ) {\r\n    this.s.logger.warn(\r\n      f(\r\n        'warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts',\r\n        this.s.options.socketTimeout,\r\n        this.s.haInterval\r\n      )\r\n    );\r\n  }\r\n\r\n  // Disconnected state\r\n  this.state = DISCONNECTED;\r\n\r\n  // Current proxies we are connecting to\r\n  this.connectingProxies = [];\r\n  // Currently connected proxies\r\n  this.connectedProxies = [];\r\n  // Disconnected proxies\r\n  this.disconnectedProxies = [];\r\n  // Index of proxy to run operations against\r\n  this.index = 0;\r\n  // High availability timeout id\r\n  this.haTimeoutId = null;\r\n  // Last ismaster\r\n  this.ismaster = null;\r\n\r\n  // Description of the Replicaset\r\n  this.topologyDescription = {\r\n    topologyType: 'Unknown',\r\n    servers: []\r\n  };\r\n\r\n  // Highest clusterTime seen in responses from the current deployment\r\n  this.clusterTime = null;\r\n\r\n  // Add event listener\r\n  EventEmitter.call(this);\r\n};\r\n\r\ninherits(Mongos, EventEmitter);\r\nObject.assign(Mongos.prototype, SessionMixins);\r\n\r\nObject.defineProperty(Mongos.prototype, 'type', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return 'mongos';\r\n  }\r\n});\r\n\r\nObject.defineProperty(Mongos.prototype, 'parserType', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return BSON.native ? 'c++' : 'js';\r\n  }\r\n});\r\n\r\nObject.defineProperty(Mongos.prototype, 'logicalSessionTimeoutMinutes', {\r\n  enumerable: true,\r\n  get: function() {\r\n    if (!this.ismaster) return null;\r\n    return this.ismaster.logicalSessionTimeoutMinutes || null;\r\n  }\r\n});\r\n\r\n/**\r\n * Emit event if it exists\r\n * @method\r\n */\r\nfunction emitSDAMEvent(self, event, description) {\r\n  if (self.listeners(event).length > 0) {\r\n    self.emit(event, description);\r\n  }\r\n}\r\n\r\nconst SERVER_EVENTS = ['serverDescriptionChanged', 'error', 'close', 'timeout', 'parseError'];\r\nfunction destroyServer(server, options, callback) {\r\n  options = options || {};\r\n  SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\r\n  server.destroy(options, callback);\r\n}\r\n\r\n/**\r\n * Initiate server connect\r\n */\r\nMongos.prototype.connect = function(options) {\r\n  var self = this;\r\n  // Add any connect level options to the internal state\r\n  this.s.connectOptions = options || {};\r\n\r\n  // Set connecting state\r\n  stateTransition(this, CONNECTING);\r\n\r\n  // Create server instances\r\n  var servers = this.s.seedlist.map(function(x) {\r\n    const server = new Server(\r\n      Object.assign({}, self.s.options, x, options, {\r\n        reconnect: false,\r\n        monitoring: false,\r\n        parent: self,\r\n        clientInfo: clone(self.s.clientInfo)\r\n      })\r\n    );\r\n\r\n    relayEvents(server, self, ['serverDescriptionChanged']);\r\n    return server;\r\n  });\r\n\r\n  // Emit the topology opening event\r\n  emitSDAMEvent(this, 'topologyOpening', { topologyId: this.id });\r\n\r\n  // Start all server connections\r\n  connectProxies(self, servers);\r\n};\r\n\r\n/**\r\n * Authenticate the topology.\r\n * @method\r\n * @param {MongoCredentials} credentials The credentials for authentication we are using\r\n * @param {authResultCallback} callback A callback function\r\n */\r\nMongos.prototype.auth = function(credentials, callback) {\r\n  if (typeof callback === 'function') callback(null, null);\r\n};\r\n\r\nfunction handleEvent(self) {\r\n  return function() {\r\n    if (self.state === DESTROYED) return;\r\n    // Move to list of disconnectedProxies\r\n    moveServerFrom(self.connectedProxies, self.disconnectedProxies, this);\r\n    // Emit the initial topology\r\n    emitTopologyDescriptionChanged(self);\r\n    // Emit the left signal\r\n    self.emit('left', 'mongos', this);\r\n    // Emit the sdam event\r\n    self.emit('serverClosed', {\r\n      topologyId: self.id,\r\n      address: this.name\r\n    });\r\n  };\r\n}\r\n\r\nfunction handleInitialConnectEvent(self, event) {\r\n  return function() {\r\n    var _this = this;\r\n\r\n    // Destroy the instance\r\n    if (self.state === DESTROYED) {\r\n      // Emit the initial topology\r\n      emitTopologyDescriptionChanged(self);\r\n      // Move from connectingProxies\r\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\r\n      return this.destroy();\r\n    }\r\n\r\n    // Check the type of server\r\n    if (event === 'connect') {\r\n      // Get last known ismaster\r\n      self.ismaster = _this.lastIsMaster();\r\n\r\n      // Is this not a proxy, remove t\r\n      if (self.ismaster.msg === 'isdbgrid') {\r\n        // Add to the connectd list\r\n        for (let i = 0; i < self.connectedProxies.length; i++) {\r\n          if (self.connectedProxies[i].name === _this.name) {\r\n            // Move from connectingProxies\r\n            moveServerFrom(self.connectingProxies, self.disconnectedProxies, _this);\r\n            // Emit the initial topology\r\n            emitTopologyDescriptionChanged(self);\r\n            _this.destroy();\r\n            return self.emit('failed', _this);\r\n          }\r\n        }\r\n\r\n        // Remove the handlers\r\n        for (let i = 0; i < handlers.length; i++) {\r\n          _this.removeAllListeners(handlers[i]);\r\n        }\r\n\r\n        // Add stable state handlers\r\n        _this.on('error', handleEvent(self, 'error'));\r\n        _this.on('close', handleEvent(self, 'close'));\r\n        _this.on('timeout', handleEvent(self, 'timeout'));\r\n        _this.on('parseError', handleEvent(self, 'parseError'));\r\n\r\n        // Move from connecting proxies connected\r\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _this);\r\n        // Emit the joined event\r\n        self.emit('joined', 'mongos', _this);\r\n      } else {\r\n        // Print warning if we did not find a mongos proxy\r\n        if (self.s.logger.isWarn()) {\r\n          var message = 'expected mongos proxy, but found replicaset member mongod for server %s';\r\n          // We have a standalone server\r\n          if (!self.ismaster.hosts) {\r\n            message = 'expected mongos proxy, but found standalone mongod for server %s';\r\n          }\r\n\r\n          self.s.logger.warn(f(message, _this.name));\r\n        }\r\n\r\n        // This is not a mongos proxy, remove it completely\r\n        removeProxyFrom(self.connectingProxies, _this);\r\n        // Emit the left event\r\n        self.emit('left', 'server', _this);\r\n        // Emit failed event\r\n        self.emit('failed', _this);\r\n      }\r\n    } else {\r\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\r\n      // Emit the left event\r\n      self.emit('left', 'mongos', this);\r\n      // Emit failed event\r\n      self.emit('failed', this);\r\n    }\r\n\r\n    // Emit the initial topology\r\n    emitTopologyDescriptionChanged(self);\r\n\r\n    // Trigger topologyMonitor\r\n    if (self.connectingProxies.length === 0) {\r\n      // Emit connected if we are connected\r\n      if (self.connectedProxies.length > 0 && self.state === CONNECTING) {\r\n        // Set the state to connected\r\n        stateTransition(self, CONNECTED);\r\n        // Emit the connect event\r\n        self.emit('connect', self);\r\n        self.emit('fullsetup', self);\r\n        self.emit('all', self);\r\n      } else if (self.disconnectedProxies.length === 0) {\r\n        // Print warning if we did not find a mongos proxy\r\n        if (self.s.logger.isWarn()) {\r\n          self.s.logger.warn(\r\n            f('no mongos proxies found in seed list, did you mean to connect to a replicaset')\r\n          );\r\n        }\r\n\r\n        // Emit the error that no proxies were found\r\n        return self.emit('error', new MongoError('no mongos proxies found in seed list'));\r\n      }\r\n\r\n      // Topology monitor\r\n      topologyMonitor(self, { firstConnect: true });\r\n    }\r\n  };\r\n}\r\n\r\nfunction connectProxies(self, servers) {\r\n  // Update connectingProxies\r\n  self.connectingProxies = self.connectingProxies.concat(servers);\r\n\r\n  // Index used to interleaf the server connects, avoiding\r\n  // runtime issues on io constrained vm's\r\n  var timeoutInterval = 0;\r\n\r\n  function connect(server, timeoutInterval) {\r\n    setTimeout(function() {\r\n      // Emit opening server event\r\n      self.emit('serverOpening', {\r\n        topologyId: self.id,\r\n        address: server.name\r\n      });\r\n\r\n      // Emit the initial topology\r\n      emitTopologyDescriptionChanged(self);\r\n\r\n      // Add event handlers\r\n      server.once('close', handleInitialConnectEvent(self, 'close'));\r\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\r\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\r\n      server.once('error', handleInitialConnectEvent(self, 'error'));\r\n      server.once('connect', handleInitialConnectEvent(self, 'connect'));\r\n\r\n      // Command Monitoring events\r\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\r\n\r\n      // Start connection\r\n      server.connect(self.s.connectOptions);\r\n    }, timeoutInterval);\r\n  }\r\n  // Start all the servers\r\n  while (servers.length > 0) {\r\n    connect(servers.shift(), timeoutInterval++);\r\n  }\r\n}\r\n\r\nfunction pickProxy(self, session) {\r\n  // TODO: Destructure :)\r\n  const transaction = session && session.transaction;\r\n\r\n  if (transaction && transaction.server) {\r\n    if (transaction.server.isConnected()) {\r\n      return transaction.server;\r\n    } else {\r\n      transaction.unpinServer();\r\n    }\r\n  }\r\n\r\n  // Get the currently connected Proxies\r\n  var connectedProxies = self.connectedProxies.slice(0);\r\n\r\n  // Set lower bound\r\n  var lowerBoundLatency = Number.MAX_VALUE;\r\n\r\n  // Determine the lower bound for the Proxies\r\n  for (var i = 0; i < connectedProxies.length; i++) {\r\n    if (connectedProxies[i].lastIsMasterMS < lowerBoundLatency) {\r\n      lowerBoundLatency = connectedProxies[i].lastIsMasterMS;\r\n    }\r\n  }\r\n\r\n  // Filter out the possible servers\r\n  connectedProxies = connectedProxies.filter(function(server) {\r\n    if (\r\n      server.lastIsMasterMS <= lowerBoundLatency + self.s.localThresholdMS &&\r\n      server.isConnected()\r\n    ) {\r\n      return true;\r\n    }\r\n  });\r\n\r\n  let proxy;\r\n\r\n  // We have no connectedProxies pick first of the connected ones\r\n  if (connectedProxies.length === 0) {\r\n    proxy = self.connectedProxies[0];\r\n  } else {\r\n    // Get proxy\r\n    proxy = connectedProxies[self.index % connectedProxies.length];\r\n    // Update the index\r\n    self.index = (self.index + 1) % connectedProxies.length;\r\n  }\r\n\r\n  if (transaction && transaction.isActive && proxy && proxy.isConnected()) {\r\n    transaction.pinServer(proxy);\r\n  }\r\n\r\n  // Return the proxy\r\n  return proxy;\r\n}\r\n\r\nfunction moveServerFrom(from, to, proxy) {\r\n  for (var i = 0; i < from.length; i++) {\r\n    if (from[i].name === proxy.name) {\r\n      from.splice(i, 1);\r\n    }\r\n  }\r\n\r\n  for (i = 0; i < to.length; i++) {\r\n    if (to[i].name === proxy.name) {\r\n      to.splice(i, 1);\r\n    }\r\n  }\r\n\r\n  to.push(proxy);\r\n}\r\n\r\nfunction removeProxyFrom(from, proxy) {\r\n  for (var i = 0; i < from.length; i++) {\r\n    if (from[i].name === proxy.name) {\r\n      from.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction reconnectProxies(self, proxies, callback) {\r\n  // Count lefts\r\n  var count = proxies.length;\r\n\r\n  // Handle events\r\n  var _handleEvent = function(self, event) {\r\n    return function() {\r\n      var _self = this;\r\n      count = count - 1;\r\n\r\n      // Destroyed\r\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\r\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\r\n        return this.destroy();\r\n      }\r\n\r\n      if (event === 'connect') {\r\n        // Destroyed\r\n        if (self.state === DESTROYED || self.state === UNREFERENCED) {\r\n          moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\r\n          return _self.destroy();\r\n        }\r\n\r\n        // Remove the handlers\r\n        for (var i = 0; i < handlers.length; i++) {\r\n          _self.removeAllListeners(handlers[i]);\r\n        }\r\n\r\n        // Add stable state handlers\r\n        _self.on('error', handleEvent(self, 'error'));\r\n        _self.on('close', handleEvent(self, 'close'));\r\n        _self.on('timeout', handleEvent(self, 'timeout'));\r\n        _self.on('parseError', handleEvent(self, 'parseError'));\r\n\r\n        // Move to the connected servers\r\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _self);\r\n        // Emit topology Change\r\n        emitTopologyDescriptionChanged(self);\r\n        // Emit joined event\r\n        self.emit('joined', 'mongos', _self);\r\n      } else {\r\n        // Move from connectingProxies\r\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\r\n        this.destroy();\r\n      }\r\n\r\n      // Are we done finish up callback\r\n      if (count === 0) {\r\n        callback();\r\n      }\r\n    };\r\n  };\r\n\r\n  // No new servers\r\n  if (count === 0) {\r\n    return callback();\r\n  }\r\n\r\n  // Execute method\r\n  function execute(_server, i) {\r\n    setTimeout(function() {\r\n      // Destroyed\r\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\r\n        return;\r\n      }\r\n\r\n      // Create a new server instance\r\n      var server = new Server(\r\n        Object.assign({}, self.s.options, {\r\n          host: _server.name.split(':')[0],\r\n          port: parseInt(_server.name.split(':')[1], 10),\r\n          reconnect: false,\r\n          monitoring: false,\r\n          parent: self,\r\n          clientInfo: clone(self.s.clientInfo)\r\n        })\r\n      );\r\n\r\n      destroyServer(_server);\r\n      removeProxyFrom(self.disconnectedProxies, _server);\r\n\r\n      // Relay the server description change\r\n      relayEvents(server, self, ['serverDescriptionChanged']);\r\n\r\n      // Emit opening server event\r\n      self.emit('serverOpening', {\r\n        topologyId: server.s.topologyId !== -1 ? server.s.topologyId : self.id,\r\n        address: server.name\r\n      });\r\n\r\n      // Add temp handlers\r\n      server.once('connect', _handleEvent(self, 'connect'));\r\n      server.once('close', _handleEvent(self, 'close'));\r\n      server.once('timeout', _handleEvent(self, 'timeout'));\r\n      server.once('error', _handleEvent(self, 'error'));\r\n      server.once('parseError', _handleEvent(self, 'parseError'));\r\n\r\n      // Command Monitoring events\r\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\r\n\r\n      // Connect to proxy\r\n      self.connectingProxies.push(server);\r\n      server.connect(self.s.connectOptions);\r\n    }, i);\r\n  }\r\n\r\n  // Create new instances\r\n  for (var i = 0; i < proxies.length; i++) {\r\n    execute(proxies[i], i);\r\n  }\r\n}\r\n\r\nfunction topologyMonitor(self, options) {\r\n  options = options || {};\r\n\r\n  // Set momitoring timeout\r\n  self.haTimeoutId = setTimeout(function() {\r\n    if (self.state === DESTROYED || self.state === UNREFERENCED) return;\r\n    // If we have a primary and a disconnect handler, execute\r\n    // buffered operations\r\n    if (self.isConnected() && self.s.disconnectHandler) {\r\n      self.s.disconnectHandler.execute();\r\n    }\r\n\r\n    // Get the connectingServers\r\n    var proxies = self.connectedProxies.slice(0);\r\n    // Get the count\r\n    var count = proxies.length;\r\n\r\n    // If the count is zero schedule a new fast\r\n    function pingServer(_self, _server, cb) {\r\n      // Measure running time\r\n      var start = new Date().getTime();\r\n\r\n      // Emit the server heartbeat start\r\n      emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: _server.name });\r\n\r\n      // Execute ismaster\r\n      _server.command(\r\n        'admin.$cmd',\r\n        {\r\n          ismaster: true\r\n        },\r\n        {\r\n          monitoring: true,\r\n          socketTimeout: self.s.options.connectionTimeout || 2000\r\n        },\r\n        function(err, r) {\r\n          if (self.state === DESTROYED || self.state === UNREFERENCED) {\r\n            // Move from connectingProxies\r\n            moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\r\n            _server.destroy();\r\n            return cb(err, r);\r\n          }\r\n\r\n          // Calculate latency\r\n          var latencyMS = new Date().getTime() - start;\r\n\r\n          // We had an error, remove it from the state\r\n          if (err) {\r\n            // Emit the server heartbeat failure\r\n            emitSDAMEvent(self, 'serverHeartbeatFailed', {\r\n              durationMS: latencyMS,\r\n              failure: err,\r\n              connectionId: _server.name\r\n            });\r\n            // Move from connected proxies to disconnected proxies\r\n            moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\r\n          } else {\r\n            // Update the server ismaster\r\n            _server.ismaster = r.result;\r\n            _server.lastIsMasterMS = latencyMS;\r\n\r\n            // Server heart beat event\r\n            emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\r\n              durationMS: latencyMS,\r\n              reply: r.result,\r\n              connectionId: _server.name\r\n            });\r\n          }\r\n\r\n          cb(err, r);\r\n        }\r\n      );\r\n    }\r\n\r\n    // No proxies initiate monitor again\r\n    if (proxies.length === 0) {\r\n      // Emit close event if any listeners registered\r\n      if (self.listeners('close').length > 0 && self.state === CONNECTING) {\r\n        self.emit('error', new MongoError('no mongos proxy available'));\r\n      } else {\r\n        self.emit('close', self);\r\n      }\r\n\r\n      // Attempt to connect to any unknown servers\r\n      return reconnectProxies(self, self.disconnectedProxies, function() {\r\n        if (self.state === DESTROYED || self.state === UNREFERENCED) return;\r\n\r\n        // Are we connected ? emit connect event\r\n        if (self.state === CONNECTING && options.firstConnect) {\r\n          self.emit('connect', self);\r\n          self.emit('fullsetup', self);\r\n          self.emit('all', self);\r\n        } else if (self.isConnected()) {\r\n          self.emit('reconnect', self);\r\n        } else if (!self.isConnected() && self.listeners('close').length > 0) {\r\n          self.emit('close', self);\r\n        }\r\n\r\n        // Perform topology monitor\r\n        topologyMonitor(self);\r\n      });\r\n    }\r\n\r\n    // Ping all servers\r\n    for (var i = 0; i < proxies.length; i++) {\r\n      pingServer(self, proxies[i], function() {\r\n        count = count - 1;\r\n\r\n        if (count === 0) {\r\n          if (self.state === DESTROYED || self.state === UNREFERENCED) return;\r\n\r\n          // Attempt to connect to any unknown servers\r\n          reconnectProxies(self, self.disconnectedProxies, function() {\r\n            if (self.state === DESTROYED || self.state === UNREFERENCED) return;\r\n            // Perform topology monitor\r\n            topologyMonitor(self);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }, self.s.haInterval);\r\n}\r\n\r\n/**\r\n * Returns the last known ismaster document for this server\r\n * @method\r\n * @return {object}\r\n */\r\nMongos.prototype.lastIsMaster = function() {\r\n  return this.ismaster;\r\n};\r\n\r\n/**\r\n * Unref all connections belong to this server\r\n * @method\r\n */\r\nMongos.prototype.unref = function() {\r\n  // Transition state\r\n  stateTransition(this, UNREFERENCED);\r\n  // Get all proxies\r\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\r\n  proxies.forEach(function(x) {\r\n    x.unref();\r\n  });\r\n\r\n  clearTimeout(this.haTimeoutId);\r\n};\r\n\r\n/**\r\n * Destroy the server connection\r\n * @param {boolean} [options.force=false] Force destroy the pool\r\n * @method\r\n */\r\nMongos.prototype.destroy = function(options, callback) {\r\n  if (this.haTimeoutId) {\r\n    clearTimeout(this.haTimeoutId);\r\n  }\r\n\r\n  const proxies = this.connectedProxies.concat(this.connectingProxies);\r\n  let serverCount = proxies.length;\r\n  const serverDestroyed = () => {\r\n    serverCount--;\r\n    if (serverCount > 0) {\r\n      return;\r\n    }\r\n\r\n    emitTopologyDescriptionChanged(this);\r\n    emitSDAMEvent(this, 'topologyClosed', { topologyId: this.id });\r\n    stateTransition(this, DESTROYED);\r\n    if (typeof callback === 'function') {\r\n      callback(null, null);\r\n    }\r\n  };\r\n\r\n  if (serverCount === 0) {\r\n    serverDestroyed();\r\n    return;\r\n  }\r\n\r\n  // Destroy all connecting servers\r\n  proxies.forEach(server => {\r\n    // Emit the sdam event\r\n    this.emit('serverClosed', {\r\n      topologyId: this.id,\r\n      address: server.name\r\n    });\r\n\r\n    destroyServer(server, options, serverDestroyed);\r\n    moveServerFrom(this.connectedProxies, this.disconnectedProxies, server);\r\n  });\r\n};\r\n\r\n/**\r\n * Figure out if the server is connected\r\n * @method\r\n * @return {boolean}\r\n */\r\nMongos.prototype.isConnected = function() {\r\n  return this.connectedProxies.length > 0;\r\n};\r\n\r\n/**\r\n * Figure out if the server instance was destroyed by calling destroy\r\n * @method\r\n * @return {boolean}\r\n */\r\nMongos.prototype.isDestroyed = function() {\r\n  return this.state === DESTROYED;\r\n};\r\n\r\n//\r\n// Operations\r\n//\r\n\r\nfunction executeWriteOperation(args, options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\r\n  const self = args.self;\r\n  const op = args.op;\r\n  const ns = args.ns;\r\n  const ops = args.ops;\r\n\r\n  // Pick a server\r\n  let server = pickProxy(self, options.session);\r\n  // No server found error out\r\n  if (!server) return callback(new MongoError('no mongos proxy available'));\r\n\r\n  const willRetryWrite =\r\n    !args.retrying &&\r\n    !!options.retryWrites &&\r\n    options.session &&\r\n    isRetryableWritesSupported(self) &&\r\n    !options.session.inTransaction();\r\n\r\n  const handler = (err, result) => {\r\n    if (!err) return callback(null, result);\r\n    if (!isRetryableError(err) || !willRetryWrite) {\r\n      err = getMMAPError(err);\r\n      return callback(err);\r\n    }\r\n\r\n    // Pick another server\r\n    server = pickProxy(self, options.session);\r\n\r\n    // No server found error out with original error\r\n    if (!server) {\r\n      return callback(err);\r\n    }\r\n\r\n    const newArgs = Object.assign({}, args, { retrying: true });\r\n    return executeWriteOperation(newArgs, options, callback);\r\n  };\r\n\r\n  if (callback.operationId) {\r\n    handler.operationId = callback.operationId;\r\n  }\r\n\r\n  // increment and assign txnNumber\r\n  if (willRetryWrite) {\r\n    options.session.incrementTransactionNumber();\r\n    options.willRetryWrite = willRetryWrite;\r\n  }\r\n\r\n  // rerun the operation\r\n  server[op](ns, ops, options, handler);\r\n}\r\n\r\n/**\r\n * Insert one or more documents\r\n * @method\r\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n * @param {array} ops An array of documents to insert\r\n * @param {boolean} [options.ordered=true] Execute in order or out of order\r\n * @param {object} [options.writeConcern={}] Write concern for the operation\r\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n * @param {ClientSession} [options.session=null] Session to use for the operation\r\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\r\n * @param {opResultCallback} callback A callback function\r\n */\r\nMongos.prototype.insert = function(ns, ops, options, callback) {\r\n  if (typeof options === 'function') {\r\n    (callback = options), (options = {}), (options = options || {});\r\n  }\r\n\r\n  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed')));\r\n\r\n  // Not connected but we have a disconnecthandler\r\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\r\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\r\n  }\r\n\r\n  // No mongos proxy available\r\n  if (!this.isConnected()) {\r\n    return callback(new MongoError('no mongos proxy available'));\r\n  }\r\n\r\n  // Execute write operation\r\n  executeWriteOperation({ self: this, op: 'insert', ns, ops }, options, callback);\r\n};\r\n\r\n/**\r\n * Perform one or more update operations\r\n * @method\r\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n * @param {array} ops An array of updates\r\n * @param {boolean} [options.ordered=true] Execute in order or out of order\r\n * @param {object} [options.writeConcern={}] Write concern for the operation\r\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n * @param {ClientSession} [options.session=null] Session to use for the operation\r\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\r\n * @param {opResultCallback} callback A callback function\r\n */\r\nMongos.prototype.update = function(ns, ops, options, callback) {\r\n  if (typeof options === 'function') {\r\n    (callback = options), (options = {}), (options = options || {});\r\n  }\r\n\r\n  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed')));\r\n\r\n  // Not connected but we have a disconnecthandler\r\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\r\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\r\n  }\r\n\r\n  // No mongos proxy available\r\n  if (!this.isConnected()) {\r\n    return callback(new MongoError('no mongos proxy available'));\r\n  }\r\n\r\n  // Execute write operation\r\n  executeWriteOperation({ self: this, op: 'update', ns, ops }, options, callback);\r\n};\r\n\r\n/**\r\n * Perform one or more remove operations\r\n * @method\r\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n * @param {array} ops An array of removes\r\n * @param {boolean} [options.ordered=true] Execute in order or out of order\r\n * @param {object} [options.writeConcern={}] Write concern for the operation\r\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n * @param {ClientSession} [options.session=null] Session to use for the operation\r\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\r\n * @param {opResultCallback} callback A callback function\r\n */\r\nMongos.prototype.remove = function(ns, ops, options, callback) {\r\n  if (typeof options === 'function') {\r\n    (callback = options), (options = {}), (options = options || {});\r\n  }\r\n\r\n  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed')));\r\n\r\n  // Not connected but we have a disconnecthandler\r\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\r\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\r\n  }\r\n\r\n  // No mongos proxy available\r\n  if (!this.isConnected()) {\r\n    return callback(new MongoError('no mongos proxy available'));\r\n  }\r\n\r\n  // Execute write operation\r\n  executeWriteOperation({ self: this, op: 'remove', ns, ops }, options, callback);\r\n};\r\n\r\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\r\n\r\nfunction isWriteCommand(command) {\r\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\r\n}\r\n\r\n/**\r\n * Execute a command\r\n * @method\r\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n * @param {object} cmd The command hash\r\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\r\n * @param {Connection} [options.connection] Specify connection object to execute command against\r\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n * @param {ClientSession} [options.session=null] Session to use for the operation\r\n * @param {opResultCallback} callback A callback function\r\n */\r\nMongos.prototype.command = function(ns, cmd, options, callback) {\r\n  if (typeof options === 'function') {\r\n    (callback = options), (options = {}), (options = options || {});\r\n  }\r\n\r\n  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed')));\r\n  var self = this;\r\n\r\n  // Pick a proxy\r\n  var server = pickProxy(self, options.session);\r\n\r\n  // Topology is not connected, save the call in the provided store to be\r\n  // Executed at some point when the handler deems it's reconnected\r\n  if ((server == null || !server.isConnected()) && this.s.disconnectHandler != null) {\r\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\r\n  }\r\n\r\n  // No server returned we had an error\r\n  if (server == null) {\r\n    return callback(new MongoError('no mongos proxy available'));\r\n  }\r\n\r\n  // Cloned options\r\n  var clonedOptions = cloneOptions(options);\r\n  clonedOptions.topology = self;\r\n\r\n  const willRetryWrite =\r\n    !options.retrying &&\r\n    options.retryWrites &&\r\n    options.session &&\r\n    isRetryableWritesSupported(self) &&\r\n    !options.session.inTransaction() &&\r\n    isWriteCommand(cmd);\r\n\r\n  const cb = (err, result) => {\r\n    if (!err) return callback(null, result);\r\n    if (!isRetryableError(err)) {\r\n      return callback(err);\r\n    }\r\n\r\n    if (willRetryWrite) {\r\n      const newOptions = Object.assign({}, clonedOptions, { retrying: true });\r\n      return this.command(ns, cmd, newOptions, callback);\r\n    }\r\n\r\n    return callback(err);\r\n  };\r\n\r\n  // increment and assign txnNumber\r\n  if (willRetryWrite) {\r\n    options.session.incrementTransactionNumber();\r\n    options.willRetryWrite = willRetryWrite;\r\n  }\r\n\r\n  // Execute the command\r\n  server.command(ns, cmd, clonedOptions, cb);\r\n};\r\n\r\n/**\r\n * Get a new cursor\r\n * @method\r\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\r\n * @param {object} [options] Options for the cursor\r\n * @param {object} [options.batchSize=0] Batchsize for the operation\r\n * @param {array} [options.documents=[]] Initial documents list for cursor\r\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\r\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n * @param {ClientSession} [options.session=null] Session to use for the operation\r\n * @param {object} [options.topology] The internal topology of the created cursor\r\n * @returns {Cursor}\r\n */\r\nMongos.prototype.cursor = function(ns, cmd, options) {\r\n  options = options || {};\r\n  const topology = options.topology || this;\r\n\r\n  // Set up final cursor type\r\n  var FinalCursor = options.cursorFactory || this.s.Cursor;\r\n\r\n  // Return the cursor\r\n  return new FinalCursor(topology, ns, cmd, options);\r\n};\r\n\r\n/**\r\n * Selects a server\r\n *\r\n * @method\r\n * @param {function} selector Unused\r\n * @param {ReadPreference} [options.readPreference] Unused\r\n * @param {ClientSession} [options.session] Specify a session if it is being used\r\n * @param {function} callback\r\n */\r\nMongos.prototype.selectServer = function(selector, options, callback) {\r\n  if (typeof selector === 'function' && typeof callback === 'undefined')\r\n    (callback = selector), (selector = undefined), (options = {});\r\n  if (typeof options === 'function')\r\n    (callback = options), (options = selector), (selector = undefined);\r\n  options = options || {};\r\n\r\n  const server = pickProxy(this, options.session);\r\n  if (server == null) {\r\n    callback(new MongoError('server selection failed'));\r\n    return;\r\n  }\r\n\r\n  if (this.s.debug) this.emit('pickedServer', null, server);\r\n  callback(null, server);\r\n};\r\n\r\n/**\r\n * All raw connections\r\n * @method\r\n * @return {Connection[]}\r\n */\r\nMongos.prototype.connections = function() {\r\n  var connections = [];\r\n\r\n  for (var i = 0; i < this.connectedProxies.length; i++) {\r\n    connections = connections.concat(this.connectedProxies[i].connections());\r\n  }\r\n\r\n  return connections;\r\n};\r\n\r\nfunction emitTopologyDescriptionChanged(self) {\r\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\r\n    var topology = 'Unknown';\r\n    if (self.connectedProxies.length > 0) {\r\n      topology = 'Sharded';\r\n    }\r\n\r\n    // Generate description\r\n    var description = {\r\n      topologyType: topology,\r\n      servers: []\r\n    };\r\n\r\n    // All proxies\r\n    var proxies = self.disconnectedProxies.concat(self.connectingProxies);\r\n\r\n    // Add all the disconnected proxies\r\n    description.servers = description.servers.concat(\r\n      proxies.map(function(x) {\r\n        var description = x.getDescription();\r\n        description.type = 'Unknown';\r\n        return description;\r\n      })\r\n    );\r\n\r\n    // Add all the connected proxies\r\n    description.servers = description.servers.concat(\r\n      self.connectedProxies.map(function(x) {\r\n        var description = x.getDescription();\r\n        description.type = 'Mongos';\r\n        return description;\r\n      })\r\n    );\r\n\r\n    // Get the diff\r\n    var diffResult = diff(self.topologyDescription, description);\r\n\r\n    // Create the result\r\n    var result = {\r\n      topologyId: self.id,\r\n      previousDescription: self.topologyDescription,\r\n      newDescription: description,\r\n      diff: diffResult\r\n    };\r\n\r\n    // Emit the topologyDescription change\r\n    if (diffResult.servers.length > 0) {\r\n      self.emit('topologyDescriptionChanged', result);\r\n    }\r\n\r\n    // Set the new description\r\n    self.topologyDescription = description;\r\n  }\r\n}\r\n\r\n/**\r\n * A mongos connect event, used to verify that the connection is up and running\r\n *\r\n * @event Mongos#connect\r\n * @type {Mongos}\r\n */\r\n\r\n/**\r\n * A mongos reconnect event, used to verify that the mongos topology has reconnected\r\n *\r\n * @event Mongos#reconnect\r\n * @type {Mongos}\r\n */\r\n\r\n/**\r\n * A mongos fullsetup event, used to signal that all topology members have been contacted.\r\n *\r\n * @event Mongos#fullsetup\r\n * @type {Mongos}\r\n */\r\n\r\n/**\r\n * A mongos all event, used to signal that all topology members have been contacted.\r\n *\r\n * @event Mongos#all\r\n * @type {Mongos}\r\n */\r\n\r\n/**\r\n * A server member left the mongos list\r\n *\r\n * @event Mongos#left\r\n * @type {Mongos}\r\n * @param {string} type The type of member that left (mongos)\r\n * @param {Server} server The server object that left\r\n */\r\n\r\n/**\r\n * A server member joined the mongos list\r\n *\r\n * @event Mongos#joined\r\n * @type {Mongos}\r\n * @param {string} type The type of member that left (mongos)\r\n * @param {Server} server The server object that joined\r\n */\r\n\r\n/**\r\n * A server opening SDAM monitoring event\r\n *\r\n * @event Mongos#serverOpening\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * A server closed SDAM monitoring event\r\n *\r\n * @event Mongos#serverClosed\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * A server description SDAM change monitoring event\r\n *\r\n * @event Mongos#serverDescriptionChanged\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * A topology open SDAM event\r\n *\r\n * @event Mongos#topologyOpening\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * A topology closed SDAM event\r\n *\r\n * @event Mongos#topologyClosed\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * A topology structure SDAM change event\r\n *\r\n * @event Mongos#topologyDescriptionChanged\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * A topology serverHeartbeatStarted SDAM event\r\n *\r\n * @event Mongos#serverHeartbeatStarted\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * A topology serverHeartbeatFailed SDAM event\r\n *\r\n * @event Mongos#serverHeartbeatFailed\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * A topology serverHeartbeatSucceeded SDAM change event\r\n *\r\n * @event Mongos#serverHeartbeatSucceeded\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * An event emitted indicating a command was started, if command monitoring is enabled\r\n *\r\n * @event Mongos#commandStarted\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * An event emitted indicating a command succeeded, if command monitoring is enabled\r\n *\r\n * @event Mongos#commandSucceeded\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * An event emitted indicating a command failed, if command monitoring is enabled\r\n *\r\n * @event Mongos#commandFailed\r\n * @type {object}\r\n */\r\n\r\nmodule.exports = Mongos;\r\n"]},"metadata":{},"sourceType":"script"}