{"ast":null,"code":"'use strict';\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\n\nconst retrieveKerberos = require('../utils').retrieveKerberos;\n\nlet kerberos;\n/**\r\n * Creates a new SSPI authentication mechanism\r\n * @class\r\n * @extends AuthProvider\r\n */\n\nclass SSPI extends AuthProvider {\n  /**\r\n   * Implementation of authentication for a single connection\r\n   * @override\r\n   */\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n    // TODO: Destructure this\n    const username = credentials.username;\n    const password = credentials.password;\n    const mechanismProperties = credentials.mechanismProperties;\n    const gssapiServiceName = mechanismProperties['gssapiservicename'] || mechanismProperties['gssapiServiceName'] || 'mongodb';\n    SSIPAuthenticate(this, kerberos.processes.MongoAuthProcess, username, password, gssapiServiceName, sendAuthCommand, connection, mechanismProperties, callback);\n  }\n  /**\r\n   * Authenticate\r\n   * @override\r\n   * @method\r\n   */\n\n\n  auth(sendAuthCommand, connections, credentials, callback) {\n    if (kerberos == null) {\n      try {\n        kerberos = retrieveKerberos();\n      } catch (e) {\n        return callback(e, null);\n      }\n    }\n\n    super.auth(sendAuthCommand, connections, credentials, callback);\n  }\n\n}\n\nfunction SSIPAuthenticate(self, MongoAuthProcess, username, password, gssapiServiceName, sendAuthCommand, connection, options, callback) {\n  const authProcess = new MongoAuthProcess(connection.host, connection.port, gssapiServiceName, options);\n\n  function authCommand(command, authCb) {\n    sendAuthCommand(connection, '$external.$cmd', command, authCb);\n  }\n\n  authProcess.init(username, password, err => {\n    if (err) return callback(err, false);\n    authProcess.transition('', (err, payload) => {\n      if (err) return callback(err, false);\n      const command = {\n        saslStart: 1,\n        mechanism: 'GSSAPI',\n        payload,\n        autoAuthorize: 1\n      };\n      authCommand(command, (err, doc) => {\n        if (err) return callback(err, false);\n        authProcess.transition(doc.payload, (err, payload) => {\n          if (err) return callback(err, false);\n          const command = {\n            saslContinue: 1,\n            conversationId: doc.conversationId,\n            payload\n          };\n          authCommand(command, (err, doc) => {\n            if (err) return callback(err, false);\n            authProcess.transition(doc.payload, (err, payload) => {\n              if (err) return callback(err, false);\n              const command = {\n                saslContinue: 1,\n                conversationId: doc.conversationId,\n                payload\n              };\n              authCommand(command, (err, response) => {\n                if (err) return callback(err, false);\n                authProcess.transition(null, err => {\n                  if (err) return callback(err, null);\n                  callback(null, response);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nmodule.exports = SSPI;","map":{"version":3,"sources":["C:/Users/mehta/daydream/node_modules/mongodb/lib/core/auth/sspi.js"],"names":["AuthProvider","require","retrieveKerberos","kerberos","SSPI","_authenticateSingleConnection","sendAuthCommand","connection","credentials","callback","username","password","mechanismProperties","gssapiServiceName","SSIPAuthenticate","processes","MongoAuthProcess","auth","connections","e","self","options","authProcess","host","port","authCommand","command","authCb","init","err","transition","payload","saslStart","mechanism","autoAuthorize","doc","saslContinue","conversationId","response","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst AuthProvider = require('./auth_provider').AuthProvider;\r\nconst retrieveKerberos = require('../utils').retrieveKerberos;\r\nlet kerberos;\r\n\r\n/**\r\n * Creates a new SSPI authentication mechanism\r\n * @class\r\n * @extends AuthProvider\r\n */\r\nclass SSPI extends AuthProvider {\r\n  /**\r\n   * Implementation of authentication for a single connection\r\n   * @override\r\n   */\r\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\r\n    // TODO: Destructure this\r\n    const username = credentials.username;\r\n    const password = credentials.password;\r\n    const mechanismProperties = credentials.mechanismProperties;\r\n    const gssapiServiceName =\r\n      mechanismProperties['gssapiservicename'] ||\r\n      mechanismProperties['gssapiServiceName'] ||\r\n      'mongodb';\r\n\r\n    SSIPAuthenticate(\r\n      this,\r\n      kerberos.processes.MongoAuthProcess,\r\n      username,\r\n      password,\r\n      gssapiServiceName,\r\n      sendAuthCommand,\r\n      connection,\r\n      mechanismProperties,\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Authenticate\r\n   * @override\r\n   * @method\r\n   */\r\n  auth(sendAuthCommand, connections, credentials, callback) {\r\n    if (kerberos == null) {\r\n      try {\r\n        kerberos = retrieveKerberos();\r\n      } catch (e) {\r\n        return callback(e, null);\r\n      }\r\n    }\r\n\r\n    super.auth(sendAuthCommand, connections, credentials, callback);\r\n  }\r\n}\r\n\r\nfunction SSIPAuthenticate(\r\n  self,\r\n  MongoAuthProcess,\r\n  username,\r\n  password,\r\n  gssapiServiceName,\r\n  sendAuthCommand,\r\n  connection,\r\n  options,\r\n  callback\r\n) {\r\n  const authProcess = new MongoAuthProcess(\r\n    connection.host,\r\n    connection.port,\r\n    gssapiServiceName,\r\n    options\r\n  );\r\n\r\n  function authCommand(command, authCb) {\r\n    sendAuthCommand(connection, '$external.$cmd', command, authCb);\r\n  }\r\n\r\n  authProcess.init(username, password, err => {\r\n    if (err) return callback(err, false);\r\n\r\n    authProcess.transition('', (err, payload) => {\r\n      if (err) return callback(err, false);\r\n\r\n      const command = {\r\n        saslStart: 1,\r\n        mechanism: 'GSSAPI',\r\n        payload,\r\n        autoAuthorize: 1\r\n      };\r\n\r\n      authCommand(command, (err, doc) => {\r\n        if (err) return callback(err, false);\r\n\r\n        authProcess.transition(doc.payload, (err, payload) => {\r\n          if (err) return callback(err, false);\r\n          const command = {\r\n            saslContinue: 1,\r\n            conversationId: doc.conversationId,\r\n            payload\r\n          };\r\n\r\n          authCommand(command, (err, doc) => {\r\n            if (err) return callback(err, false);\r\n\r\n            authProcess.transition(doc.payload, (err, payload) => {\r\n              if (err) return callback(err, false);\r\n              const command = {\r\n                saslContinue: 1,\r\n                conversationId: doc.conversationId,\r\n                payload\r\n              };\r\n\r\n              authCommand(command, (err, response) => {\r\n                if (err) return callback(err, false);\r\n\r\n                authProcess.transition(null, err => {\r\n                  if (err) return callback(err, null);\r\n                  callback(null, response);\r\n                });\r\n              });\r\n            });\r\n          });\r\n        });\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nmodule.exports = SSPI;\r\n"]},"metadata":{},"sourceType":"script"}