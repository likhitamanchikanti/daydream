{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst isResumableError = require('./error').isResumableError;\n\nconst MongoError = require('./core').MongoError;\n\nconst Cursor = require('./cursor');\n\nconst relayEvents = require('./core/utils').relayEvents;\n\nconst maxWireVersion = require('./core/utils').maxWireVersion;\n\nconst AggregateOperation = require('./operations/aggregate');\n\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nconst CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference'].concat(CHANGE_STREAM_OPTIONS);\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\n/**\r\n * @typedef ResumeToken\r\n * @description Represents the logical starting point for a new or resuming {@link ChangeStream} on the server.\r\n * @see https://docs.mongodb.com/master/changeStreams/#change-stream-resume-token\r\n */\n\n/**\r\n * @typedef OperationTime\r\n * @description Represents a specific point in time on a server. Can be retrieved by using {@link Db#command}\r\n * @see https://docs.mongodb.com/manual/reference/method/db.runCommand/#response\r\n */\n\n/**\r\n * @typedef ChangeStreamOptions\r\n * @description Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\r\n * @property {string} [fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\r\n * @property {number} [maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query.\r\n * @property {ResumeToken} [resumeAfter] Allows you to start a changeStream after a specified event. See {@link https://docs.mongodb.com/master/changeStreams/#resumeafter-for-change-streams|ChangeStream documentation}.\r\n * @property {ResumeToken} [startAfter] Similar to resumeAfter, but will allow you to start after an invalidated event. See {@link https://docs.mongodb.com/master/changeStreams/#startafter-for-change-streams|ChangeStream documentation}.\r\n * @property {OperationTime} [startAtOperationTime] Will start the changeStream after the specified operationTime.\r\n * @property {number} [batchSize] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\r\n * @property {object} [collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\r\n * @property {ReadPreference} [readPreference] The read preference. Defaults to the read preference of the database or collection. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\r\n */\n\n/**\r\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\r\n * @class ChangeStream\r\n * @since 3.0.0\r\n * @param {(MongoClient|Db|Collection)} parent The parent object that created this change stream\r\n * @param {Array} pipeline An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\r\n * @param {ChangeStreamOptions} [options] Optional settings\r\n * @fires ChangeStream#close\r\n * @fires ChangeStream#change\r\n * @fires ChangeStream#end\r\n * @fires ChangeStream#error\r\n * @fires ChangeStream#resumeTokenChanged\r\n * @return {ChangeStream} a ChangeStream instance.\r\n */\n\nclass ChangeStream extends EventEmitter {\n  constructor(parent, pipeline, options) {\n    super();\n\n    const Collection = require('./collection');\n\n    const Db = require('./db');\n\n    const MongoClient = require('./mongo_client');\n\n    this.pipeline = pipeline || [];\n    this.options = options || {};\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n\n    if (parent instanceof Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n      this.topology = parent.s.db.serverConfig;\n    } else if (parent instanceof Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n      this.topology = parent.serverConfig;\n    } else if (parent instanceof MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n      this.topology = parent.topology;\n    } else {\n      throw new TypeError('parent provided to ChangeStream constructor is not an instance of Collection, Db, or MongoClient');\n    }\n\n    this.promiseLibrary = parent.s.promiseLibrary;\n\n    if (!this.options.readPreference && parent.s.readPreference) {\n      this.options.readPreference = parent.s.readPreference;\n    } // Create contained Change Stream cursor\n\n\n    this.cursor = createChangeStreamCursor(this, options); // Listen for any `change` listeners being added to ChangeStream\n\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this.cursor.on('data', change => processNewChange({\n          changeStream: this,\n          change,\n          eventEmitter: true\n        }));\n      }\n    }); // Listen for all `change` listeners being removed from ChangeStream\n\n    this.on('removeListener', eventName => {\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        this.cursor.removeAllListeners('data');\n      }\n    });\n  }\n  /**\r\n   * @property {ResumeToken} resumeToken\r\n   * The cached resume token that will be used to resume\r\n   * after the most recently returned change.\r\n   */\n\n\n  get resumeToken() {\n    return this.cursor.resumeToken;\n  }\n  /**\r\n   * Check if there is any document still available in the Change Stream\r\n   * @function ChangeStream.prototype.hasNext\r\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\r\n   * @throws {MongoError}\r\n   * @return {Promise} returns Promise if no callback passed\r\n   */\n\n\n  hasNext(callback) {\n    return this.cursor.hasNext(callback);\n  }\n  /**\r\n   * Get the next available document from the Change Stream, returns null if no more documents are available.\r\n   * @function ChangeStream.prototype.next\r\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\r\n   * @throws {MongoError}\r\n   * @return {Promise} returns Promise if no callback passed\r\n   */\n\n\n  next(callback) {\n    var self = this;\n\n    if (this.isClosed()) {\n      if (callback) return callback(new Error('Change Stream is not open.'), null);\n      return self.promiseLibrary.reject(new Error('Change Stream is not open.'));\n    }\n\n    return this.cursor.next().then(change => processNewChange({\n      changeStream: self,\n      change,\n      callback\n    })).catch(error => processNewChange({\n      changeStream: self,\n      error,\n      callback\n    }));\n  }\n  /**\r\n   * Is the cursor closed\r\n   * @method ChangeStream.prototype.isClosed\r\n   * @return {boolean}\r\n   */\n\n\n  isClosed() {\n    if (this.cursor) {\n      return this.cursor.isClosed();\n    }\n\n    return true;\n  }\n  /**\r\n   * Close the Change Stream\r\n   * @method ChangeStream.prototype.close\r\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\r\n   * @return {Promise} returns Promise if no callback passed\r\n   */\n\n\n  close(callback) {\n    if (!this.cursor) {\n      if (callback) return callback();\n      return this.promiseLibrary.resolve();\n    } // Tidy up the existing cursor\n\n\n    const cursor = this.cursor;\n\n    if (callback) {\n      return cursor.close(err => {\n        ['data', 'close', 'end', 'error'].forEach(event => cursor.removeAllListeners(event));\n        delete this.cursor;\n        return callback(err);\n      });\n    }\n\n    const PromiseCtor = this.promiseLibrary || Promise;\n    return new PromiseCtor((resolve, reject) => {\n      cursor.close(err => {\n        ['data', 'close', 'end', 'error'].forEach(event => cursor.removeAllListeners(event));\n        delete this.cursor;\n        if (err) return reject(err);\n        resolve();\n      });\n    });\n  }\n  /**\r\n   * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.\r\n   * @method\r\n   * @param {Writable} destination The destination for writing data\r\n   * @param {object} [options] {@link https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options|Pipe options}\r\n   * @return {null}\r\n   */\n\n\n  pipe(destination, options) {\n    if (!this.pipeDestinations) {\n      this.pipeDestinations = [];\n    }\n\n    this.pipeDestinations.push(destination);\n    return this.cursor.pipe(destination, options);\n  }\n  /**\r\n   * This method will remove the hooks set up for a previous pipe() call.\r\n   * @param {Writable} [destination] The destination for writing data\r\n   * @return {null}\r\n   */\n\n\n  unpipe(destination) {\n    if (this.pipeDestinations && this.pipeDestinations.indexOf(destination) > -1) {\n      this.pipeDestinations.splice(this.pipeDestinations.indexOf(destination), 1);\n    }\n\n    return this.cursor.unpipe(destination);\n  }\n  /**\r\n   * Return a modified Readable stream including a possible transform method.\r\n   * @method\r\n   * @param {object} [options] Optional settings.\r\n   * @param {function} [options.transform] A transformation method applied to each document emitted by the stream.\r\n   * @return {Cursor}\r\n   */\n\n\n  stream(options) {\n    this.streamOptions = options;\n    return this.cursor.stream(options);\n  }\n  /**\r\n   * This method will cause a stream in flowing mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.\r\n   * @return {null}\r\n   */\n\n\n  pause() {\n    return this.cursor.pause();\n  }\n  /**\r\n   * This method will cause the readable stream to resume emitting data events.\r\n   * @return {null}\r\n   */\n\n\n  resume() {\n    return this.cursor.resume();\n  }\n\n}\n\nclass ChangeStreamCursor extends Cursor {\n  constructor(topology, operation, options) {\n    super(topology, operation, options);\n    options = options || {};\n    this._resumeToken = null;\n    this.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      this.resumeToken = options.resumeAfter;\n    }\n  }\n\n  set resumeToken(token) {\n    this._resumeToken = token;\n    this.emit('resumeTokenChanged', token);\n  }\n\n  get resumeToken() {\n    return this._resumeToken;\n  }\n\n  get resumeOptions() {\n    const result = {};\n\n    for (const optionName of CURSOR_OPTIONS) {\n      if (this.options[optionName]) result[optionName] = this.options[optionName];\n    }\n\n    if (this.resumeToken || this.startAtOperationTime) {\n      ['resumeAfter', 'startAfter', 'startAtOperationTime'].forEach(key => delete result[key]);\n\n      if (this.resumeToken) {\n        result.resumeAfter = this.resumeToken;\n      } else if (this.startAtOperationTime && maxWireVersion(this.server) >= 7) {\n        result.startAtOperationTime = this.startAtOperationTime;\n      }\n    }\n\n    return result;\n  }\n\n  _initializeCursor(callback) {\n    super._initializeCursor((err, result) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      const response = result.documents[0];\n\n      if (this.startAtOperationTime == null && this.resumeAfter == null && this.startAfter == null && maxWireVersion(this.server) >= 7) {\n        this.startAtOperationTime = response.operationTime;\n      }\n\n      const cursor = response.cursor;\n\n      if (cursor.postBatchResumeToken) {\n        this.cursorState.postBatchResumeToken = cursor.postBatchResumeToken;\n\n        if (cursor.firstBatch.length === 0) {\n          this.resumeToken = cursor.postBatchResumeToken;\n        }\n      }\n\n      this.emit('response');\n      callback(err, result);\n    });\n  }\n\n  _getMore(callback) {\n    super._getMore((err, response) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      const cursor = response.cursor;\n\n      if (cursor.postBatchResumeToken) {\n        this.cursorState.postBatchResumeToken = cursor.postBatchResumeToken;\n\n        if (cursor.nextBatch.length === 0) {\n          this.resumeToken = cursor.postBatchResumeToken;\n        }\n      }\n\n      this.emit('response');\n      callback(err, response);\n    });\n  }\n\n}\n/**\r\n * @event ChangeStreamCursor#response\r\n * internal event DO NOT USE\r\n * @ignore\r\n */\n// Create a new change stream cursor based on self's configuration\n\n\nfunction createChangeStreamCursor(self, options) {\n  const changeStreamStageOptions = {\n    fullDocument: options.fullDocument || 'default'\n  };\n  applyKnownOptions(changeStreamStageOptions, options, CHANGE_STREAM_OPTIONS);\n\n  if (self.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n    changeStreamStageOptions.allChangesForCluster = true;\n  }\n\n  const pipeline = [{\n    $changeStream: changeStreamStageOptions\n  }].concat(self.pipeline);\n  const cursorOptions = applyKnownOptions({}, options, CURSOR_OPTIONS);\n  const changeStreamCursor = new ChangeStreamCursor(self.topology, new AggregateOperation(self.parent, pipeline, options), cursorOptions);\n  relayEvents(changeStreamCursor, self, ['resumeTokenChanged', 'end', 'close']);\n  /**\r\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\r\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\r\n   * then be passed as soon as it is available.\r\n   *\r\n   * @event ChangeStream#change\r\n   * @type {object}\r\n   */\n\n  if (self.listenerCount('change') > 0) {\n    changeStreamCursor.on('data', function (change) {\n      processNewChange({\n        changeStream: self,\n        change,\n        eventEmitter: true\n      });\n    });\n  }\n  /**\r\n   * Change stream close event\r\n   *\r\n   * @event ChangeStream#close\r\n   * @type {null}\r\n   */\n\n  /**\r\n   * Change stream end event\r\n   *\r\n   * @event ChangeStream#end\r\n   * @type {null}\r\n   */\n\n  /**\r\n   * Emitted each time the change stream stores a new resume token.\r\n   *\r\n   * @event ChangeStream#resumeTokenChanged\r\n   * @type {ResumeToken}\r\n   */\n\n  /**\r\n   * Fired when the stream encounters an error.\r\n   *\r\n   * @event ChangeStream#error\r\n   * @type {Error}\r\n   */\n\n\n  changeStreamCursor.on('error', function (error) {\n    processNewChange({\n      changeStream: self,\n      error,\n      eventEmitter: true\n    });\n  });\n\n  if (self.pipeDestinations) {\n    const cursorStream = changeStreamCursor.stream(self.streamOptions);\n\n    for (let pipeDestination in self.pipeDestinations) {\n      cursorStream.pipe(pipeDestination);\n    }\n  }\n\n  return changeStreamCursor;\n}\n\nfunction applyKnownOptions(target, source, optionNames) {\n  optionNames.forEach(name => {\n    if (source[name]) {\n      target[name] = source[name];\n    }\n  });\n  return target;\n} // This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\n\n\nconst SELECTION_TIMEOUT = 30000;\n\nfunction waitForTopologyConnected(topology, options, callback) {\n  setTimeout(() => {\n    if (options && options.start == null) options.start = process.hrtime();\n    const start = options.start || process.hrtime();\n    const timeout = options.timeout || SELECTION_TIMEOUT;\n    const readPreference = options.readPreference;\n    if (topology.isConnected({\n      readPreference\n    })) return callback(null, null);\n    const hrElapsed = process.hrtime(start);\n    const elapsed = (hrElapsed[0] * 1e9 + hrElapsed[1]) / 1e6;\n    if (elapsed > timeout) return callback(new MongoError('Timed out waiting for connection'));\n    waitForTopologyConnected(topology, options, callback);\n  }, 3000); // this is an arbitrary wait time to allow SDAM to transition\n} // Handle new change events. This method brings together the routes from the callback, event emitter, and promise ways of using ChangeStream.\n\n\nfunction processNewChange(args) {\n  const changeStream = args.changeStream;\n  const error = args.error;\n  const change = args.change;\n  const callback = args.callback;\n  const eventEmitter = args.eventEmitter || false; // If the changeStream is closed, then it should not process a change.\n\n  if (changeStream.isClosed()) {\n    // We do not error in the eventEmitter case.\n    if (eventEmitter) {\n      return;\n    }\n\n    const error = new MongoError('ChangeStream is closed');\n    return typeof callback === 'function' ? callback(error, null) : changeStream.promiseLibrary.reject(error);\n  }\n\n  const cursor = changeStream.cursor;\n  const topology = changeStream.topology;\n  const options = changeStream.cursor.options;\n\n  if (error) {\n    if (isResumableError(error) && !changeStream.attemptingResume) {\n      changeStream.attemptingResume = true; // stop listening to all events from old cursor\n\n      ['data', 'close', 'end', 'error'].forEach(event => changeStream.cursor.removeAllListeners(event)); // close internal cursor, ignore errors\n\n      changeStream.cursor.close(); // attempt recreating the cursor\n\n      if (eventEmitter) {\n        waitForTopologyConnected(topology, {\n          readPreference: options.readPreference\n        }, err => {\n          if (err) {\n            changeStream.emit('error', err);\n            changeStream.emit('close');\n            return;\n          }\n\n          changeStream.cursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\n        });\n        return;\n      }\n\n      if (callback) {\n        waitForTopologyConnected(topology, {\n          readPreference: options.readPreference\n        }, err => {\n          if (err) return callback(err, null);\n          changeStream.cursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\n          changeStream.next(callback);\n        });\n        return;\n      }\n\n      return new Promise((resolve, reject) => {\n        waitForTopologyConnected(topology, {\n          readPreference: options.readPreference\n        }, err => {\n          if (err) return reject(err);\n          resolve();\n        });\n      }).then(() => changeStream.cursor = createChangeStreamCursor(changeStream, cursor.resumeOptions)).then(() => changeStream.next());\n    }\n\n    if (eventEmitter) return changeStream.emit('error', error);\n    if (typeof callback === 'function') return callback(error, null);\n    return changeStream.promiseLibrary.reject(error);\n  }\n\n  changeStream.attemptingResume = false;\n\n  if (change && !change._id) {\n    const noResumeTokenError = new Error('A change stream document has been received that lacks a resume token (_id).');\n    if (eventEmitter) return changeStream.emit('error', noResumeTokenError);\n    if (typeof callback === 'function') return callback(noResumeTokenError, null);\n    return changeStream.promiseLibrary.reject(noResumeTokenError);\n  } // cache the resume token\n\n\n  if (cursor.bufferedCount() === 0 && cursor.cursorState.postBatchResumeToken) {\n    cursor.resumeToken = cursor.cursorState.postBatchResumeToken;\n  } else {\n    cursor.resumeToken = change._id;\n  } // wipe the startAtOperationTime if there was one so that there won't be a conflict\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n\n\n  changeStream.options.startAtOperationTime = undefined; // Return the change\n\n  if (eventEmitter) return changeStream.emit('change', change);\n  if (typeof callback === 'function') return callback(error, change);\n  return changeStream.promiseLibrary.resolve(change);\n}\n/**\r\n * The callback format for results\r\n * @callback ChangeStream~resultCallback\r\n * @param {MongoError} error An error instance representing the error during the execution.\r\n * @param {(object|null)} result The result object if the command was executed successfully.\r\n */\n\n\nmodule.exports = ChangeStream;","map":{"version":3,"sources":["C:/Users/mehta/daydream/node_modules/mongodb/lib/change_stream.js"],"names":["EventEmitter","require","isResumableError","MongoError","Cursor","relayEvents","maxWireVersion","AggregateOperation","CHANGE_STREAM_OPTIONS","CURSOR_OPTIONS","concat","CHANGE_DOMAIN_TYPES","COLLECTION","Symbol","DATABASE","CLUSTER","ChangeStream","constructor","parent","pipeline","options","Collection","Db","MongoClient","namespace","s","type","topology","db","serverConfig","TypeError","promiseLibrary","readPreference","cursor","createChangeStreamCursor","on","eventName","listenerCount","change","processNewChange","changeStream","eventEmitter","removeAllListeners","resumeToken","hasNext","callback","next","self","isClosed","Error","reject","then","catch","error","close","resolve","err","forEach","event","PromiseCtor","Promise","pipe","destination","pipeDestinations","push","unpipe","indexOf","splice","stream","streamOptions","pause","resume","ChangeStreamCursor","operation","_resumeToken","startAtOperationTime","startAfter","resumeAfter","token","emit","resumeOptions","result","optionName","key","server","_initializeCursor","response","documents","operationTime","postBatchResumeToken","cursorState","firstBatch","length","_getMore","nextBatch","changeStreamStageOptions","fullDocument","applyKnownOptions","allChangesForCluster","$changeStream","cursorOptions","changeStreamCursor","cursorStream","pipeDestination","target","source","optionNames","name","SELECTION_TIMEOUT","waitForTopologyConnected","setTimeout","start","process","hrtime","timeout","isConnected","hrElapsed","elapsed","args","attemptingResume","_id","noResumeTokenError","bufferedCount","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst EventEmitter = require('events');\r\nconst isResumableError = require('./error').isResumableError;\r\nconst MongoError = require('./core').MongoError;\r\nconst Cursor = require('./cursor');\r\nconst relayEvents = require('./core/utils').relayEvents;\r\nconst maxWireVersion = require('./core/utils').maxWireVersion;\r\nconst AggregateOperation = require('./operations/aggregate');\r\n\r\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\r\nconst CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference'].concat(\r\n  CHANGE_STREAM_OPTIONS\r\n);\r\n\r\nconst CHANGE_DOMAIN_TYPES = {\r\n  COLLECTION: Symbol('Collection'),\r\n  DATABASE: Symbol('Database'),\r\n  CLUSTER: Symbol('Cluster')\r\n};\r\n\r\n/**\r\n * @typedef ResumeToken\r\n * @description Represents the logical starting point for a new or resuming {@link ChangeStream} on the server.\r\n * @see https://docs.mongodb.com/master/changeStreams/#change-stream-resume-token\r\n */\r\n\r\n/**\r\n * @typedef OperationTime\r\n * @description Represents a specific point in time on a server. Can be retrieved by using {@link Db#command}\r\n * @see https://docs.mongodb.com/manual/reference/method/db.runCommand/#response\r\n */\r\n\r\n/**\r\n * @typedef ChangeStreamOptions\r\n * @description Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\r\n * @property {string} [fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\r\n * @property {number} [maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query.\r\n * @property {ResumeToken} [resumeAfter] Allows you to start a changeStream after a specified event. See {@link https://docs.mongodb.com/master/changeStreams/#resumeafter-for-change-streams|ChangeStream documentation}.\r\n * @property {ResumeToken} [startAfter] Similar to resumeAfter, but will allow you to start after an invalidated event. See {@link https://docs.mongodb.com/master/changeStreams/#startafter-for-change-streams|ChangeStream documentation}.\r\n * @property {OperationTime} [startAtOperationTime] Will start the changeStream after the specified operationTime.\r\n * @property {number} [batchSize] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\r\n * @property {object} [collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\r\n * @property {ReadPreference} [readPreference] The read preference. Defaults to the read preference of the database or collection. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\r\n */\r\n\r\n/**\r\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\r\n * @class ChangeStream\r\n * @since 3.0.0\r\n * @param {(MongoClient|Db|Collection)} parent The parent object that created this change stream\r\n * @param {Array} pipeline An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\r\n * @param {ChangeStreamOptions} [options] Optional settings\r\n * @fires ChangeStream#close\r\n * @fires ChangeStream#change\r\n * @fires ChangeStream#end\r\n * @fires ChangeStream#error\r\n * @fires ChangeStream#resumeTokenChanged\r\n * @return {ChangeStream} a ChangeStream instance.\r\n */\r\nclass ChangeStream extends EventEmitter {\r\n  constructor(parent, pipeline, options) {\r\n    super();\r\n    const Collection = require('./collection');\r\n    const Db = require('./db');\r\n    const MongoClient = require('./mongo_client');\r\n\r\n    this.pipeline = pipeline || [];\r\n    this.options = options || {};\r\n\r\n    this.parent = parent;\r\n    this.namespace = parent.s.namespace;\r\n    if (parent instanceof Collection) {\r\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\r\n      this.topology = parent.s.db.serverConfig;\r\n    } else if (parent instanceof Db) {\r\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\r\n      this.topology = parent.serverConfig;\r\n    } else if (parent instanceof MongoClient) {\r\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\r\n      this.topology = parent.topology;\r\n    } else {\r\n      throw new TypeError(\r\n        'parent provided to ChangeStream constructor is not an instance of Collection, Db, or MongoClient'\r\n      );\r\n    }\r\n\r\n    this.promiseLibrary = parent.s.promiseLibrary;\r\n    if (!this.options.readPreference && parent.s.readPreference) {\r\n      this.options.readPreference = parent.s.readPreference;\r\n    }\r\n\r\n    // Create contained Change Stream cursor\r\n    this.cursor = createChangeStreamCursor(this, options);\r\n\r\n    // Listen for any `change` listeners being added to ChangeStream\r\n    this.on('newListener', eventName => {\r\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\r\n        this.cursor.on('data', change =>\r\n          processNewChange({ changeStream: this, change, eventEmitter: true })\r\n        );\r\n      }\r\n    });\r\n\r\n    // Listen for all `change` listeners being removed from ChangeStream\r\n    this.on('removeListener', eventName => {\r\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\r\n        this.cursor.removeAllListeners('data');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @property {ResumeToken} resumeToken\r\n   * The cached resume token that will be used to resume\r\n   * after the most recently returned change.\r\n   */\r\n  get resumeToken() {\r\n    return this.cursor.resumeToken;\r\n  }\r\n\r\n  /**\r\n   * Check if there is any document still available in the Change Stream\r\n   * @function ChangeStream.prototype.hasNext\r\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\r\n   * @throws {MongoError}\r\n   * @return {Promise} returns Promise if no callback passed\r\n   */\r\n  hasNext(callback) {\r\n    return this.cursor.hasNext(callback);\r\n  }\r\n\r\n  /**\r\n   * Get the next available document from the Change Stream, returns null if no more documents are available.\r\n   * @function ChangeStream.prototype.next\r\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\r\n   * @throws {MongoError}\r\n   * @return {Promise} returns Promise if no callback passed\r\n   */\r\n  next(callback) {\r\n    var self = this;\r\n    if (this.isClosed()) {\r\n      if (callback) return callback(new Error('Change Stream is not open.'), null);\r\n      return self.promiseLibrary.reject(new Error('Change Stream is not open.'));\r\n    }\r\n\r\n    return this.cursor\r\n      .next()\r\n      .then(change => processNewChange({ changeStream: self, change, callback }))\r\n      .catch(error => processNewChange({ changeStream: self, error, callback }));\r\n  }\r\n\r\n  /**\r\n   * Is the cursor closed\r\n   * @method ChangeStream.prototype.isClosed\r\n   * @return {boolean}\r\n   */\r\n  isClosed() {\r\n    if (this.cursor) {\r\n      return this.cursor.isClosed();\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Close the Change Stream\r\n   * @method ChangeStream.prototype.close\r\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\r\n   * @return {Promise} returns Promise if no callback passed\r\n   */\r\n  close(callback) {\r\n    if (!this.cursor) {\r\n      if (callback) return callback();\r\n      return this.promiseLibrary.resolve();\r\n    }\r\n\r\n    // Tidy up the existing cursor\r\n    const cursor = this.cursor;\r\n\r\n    if (callback) {\r\n      return cursor.close(err => {\r\n        ['data', 'close', 'end', 'error'].forEach(event => cursor.removeAllListeners(event));\r\n        delete this.cursor;\r\n\r\n        return callback(err);\r\n      });\r\n    }\r\n\r\n    const PromiseCtor = this.promiseLibrary || Promise;\r\n    return new PromiseCtor((resolve, reject) => {\r\n      cursor.close(err => {\r\n        ['data', 'close', 'end', 'error'].forEach(event => cursor.removeAllListeners(event));\r\n        delete this.cursor;\r\n\r\n        if (err) return reject(err);\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.\r\n   * @method\r\n   * @param {Writable} destination The destination for writing data\r\n   * @param {object} [options] {@link https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options|Pipe options}\r\n   * @return {null}\r\n   */\r\n  pipe(destination, options) {\r\n    if (!this.pipeDestinations) {\r\n      this.pipeDestinations = [];\r\n    }\r\n    this.pipeDestinations.push(destination);\r\n    return this.cursor.pipe(destination, options);\r\n  }\r\n\r\n  /**\r\n   * This method will remove the hooks set up for a previous pipe() call.\r\n   * @param {Writable} [destination] The destination for writing data\r\n   * @return {null}\r\n   */\r\n  unpipe(destination) {\r\n    if (this.pipeDestinations && this.pipeDestinations.indexOf(destination) > -1) {\r\n      this.pipeDestinations.splice(this.pipeDestinations.indexOf(destination), 1);\r\n    }\r\n    return this.cursor.unpipe(destination);\r\n  }\r\n\r\n  /**\r\n   * Return a modified Readable stream including a possible transform method.\r\n   * @method\r\n   * @param {object} [options] Optional settings.\r\n   * @param {function} [options.transform] A transformation method applied to each document emitted by the stream.\r\n   * @return {Cursor}\r\n   */\r\n  stream(options) {\r\n    this.streamOptions = options;\r\n    return this.cursor.stream(options);\r\n  }\r\n\r\n  /**\r\n   * This method will cause a stream in flowing mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.\r\n   * @return {null}\r\n   */\r\n  pause() {\r\n    return this.cursor.pause();\r\n  }\r\n\r\n  /**\r\n   * This method will cause the readable stream to resume emitting data events.\r\n   * @return {null}\r\n   */\r\n  resume() {\r\n    return this.cursor.resume();\r\n  }\r\n}\r\n\r\nclass ChangeStreamCursor extends Cursor {\r\n  constructor(topology, operation, options) {\r\n    super(topology, operation, options);\r\n\r\n    options = options || {};\r\n    this._resumeToken = null;\r\n    this.startAtOperationTime = options.startAtOperationTime;\r\n\r\n    if (options.startAfter) {\r\n      this.resumeToken = options.startAfter;\r\n    } else if (options.resumeAfter) {\r\n      this.resumeToken = options.resumeAfter;\r\n    }\r\n  }\r\n\r\n  set resumeToken(token) {\r\n    this._resumeToken = token;\r\n    this.emit('resumeTokenChanged', token);\r\n  }\r\n\r\n  get resumeToken() {\r\n    return this._resumeToken;\r\n  }\r\n\r\n  get resumeOptions() {\r\n    const result = {};\r\n    for (const optionName of CURSOR_OPTIONS) {\r\n      if (this.options[optionName]) result[optionName] = this.options[optionName];\r\n    }\r\n\r\n    if (this.resumeToken || this.startAtOperationTime) {\r\n      ['resumeAfter', 'startAfter', 'startAtOperationTime'].forEach(key => delete result[key]);\r\n\r\n      if (this.resumeToken) {\r\n        result.resumeAfter = this.resumeToken;\r\n      } else if (this.startAtOperationTime && maxWireVersion(this.server) >= 7) {\r\n        result.startAtOperationTime = this.startAtOperationTime;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  _initializeCursor(callback) {\r\n    super._initializeCursor((err, result) => {\r\n      if (err) {\r\n        callback(err, null);\r\n        return;\r\n      }\r\n\r\n      const response = result.documents[0];\r\n\r\n      if (\r\n        this.startAtOperationTime == null &&\r\n        this.resumeAfter == null &&\r\n        this.startAfter == null &&\r\n        maxWireVersion(this.server) >= 7\r\n      ) {\r\n        this.startAtOperationTime = response.operationTime;\r\n      }\r\n\r\n      const cursor = response.cursor;\r\n      if (cursor.postBatchResumeToken) {\r\n        this.cursorState.postBatchResumeToken = cursor.postBatchResumeToken;\r\n\r\n        if (cursor.firstBatch.length === 0) {\r\n          this.resumeToken = cursor.postBatchResumeToken;\r\n        }\r\n      }\r\n\r\n      this.emit('response');\r\n      callback(err, result);\r\n    });\r\n  }\r\n\r\n  _getMore(callback) {\r\n    super._getMore((err, response) => {\r\n      if (err) {\r\n        callback(err, null);\r\n        return;\r\n      }\r\n\r\n      const cursor = response.cursor;\r\n      if (cursor.postBatchResumeToken) {\r\n        this.cursorState.postBatchResumeToken = cursor.postBatchResumeToken;\r\n\r\n        if (cursor.nextBatch.length === 0) {\r\n          this.resumeToken = cursor.postBatchResumeToken;\r\n        }\r\n      }\r\n\r\n      this.emit('response');\r\n      callback(err, response);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * @event ChangeStreamCursor#response\r\n * internal event DO NOT USE\r\n * @ignore\r\n */\r\n\r\n// Create a new change stream cursor based on self's configuration\r\nfunction createChangeStreamCursor(self, options) {\r\n  const changeStreamStageOptions = { fullDocument: options.fullDocument || 'default' };\r\n  applyKnownOptions(changeStreamStageOptions, options, CHANGE_STREAM_OPTIONS);\r\n  if (self.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\r\n    changeStreamStageOptions.allChangesForCluster = true;\r\n  }\r\n\r\n  const pipeline = [{ $changeStream: changeStreamStageOptions }].concat(self.pipeline);\r\n  const cursorOptions = applyKnownOptions({}, options, CURSOR_OPTIONS);\r\n  const changeStreamCursor = new ChangeStreamCursor(\r\n    self.topology,\r\n    new AggregateOperation(self.parent, pipeline, options),\r\n    cursorOptions\r\n  );\r\n\r\n  relayEvents(changeStreamCursor, self, ['resumeTokenChanged', 'end', 'close']);\r\n\r\n  /**\r\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\r\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\r\n   * then be passed as soon as it is available.\r\n   *\r\n   * @event ChangeStream#change\r\n   * @type {object}\r\n   */\r\n  if (self.listenerCount('change') > 0) {\r\n    changeStreamCursor.on('data', function(change) {\r\n      processNewChange({ changeStream: self, change, eventEmitter: true });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change stream close event\r\n   *\r\n   * @event ChangeStream#close\r\n   * @type {null}\r\n   */\r\n\r\n  /**\r\n   * Change stream end event\r\n   *\r\n   * @event ChangeStream#end\r\n   * @type {null}\r\n   */\r\n\r\n  /**\r\n   * Emitted each time the change stream stores a new resume token.\r\n   *\r\n   * @event ChangeStream#resumeTokenChanged\r\n   * @type {ResumeToken}\r\n   */\r\n\r\n  /**\r\n   * Fired when the stream encounters an error.\r\n   *\r\n   * @event ChangeStream#error\r\n   * @type {Error}\r\n   */\r\n  changeStreamCursor.on('error', function(error) {\r\n    processNewChange({ changeStream: self, error, eventEmitter: true });\r\n  });\r\n\r\n  if (self.pipeDestinations) {\r\n    const cursorStream = changeStreamCursor.stream(self.streamOptions);\r\n    for (let pipeDestination in self.pipeDestinations) {\r\n      cursorStream.pipe(pipeDestination);\r\n    }\r\n  }\r\n\r\n  return changeStreamCursor;\r\n}\r\n\r\nfunction applyKnownOptions(target, source, optionNames) {\r\n  optionNames.forEach(name => {\r\n    if (source[name]) {\r\n      target[name] = source[name];\r\n    }\r\n  });\r\n\r\n  return target;\r\n}\r\n\r\n// This method performs a basic server selection loop, satisfying the requirements of\r\n// ChangeStream resumability until the new SDAM layer can be used.\r\nconst SELECTION_TIMEOUT = 30000;\r\nfunction waitForTopologyConnected(topology, options, callback) {\r\n  setTimeout(() => {\r\n    if (options && options.start == null) options.start = process.hrtime();\r\n    const start = options.start || process.hrtime();\r\n    const timeout = options.timeout || SELECTION_TIMEOUT;\r\n    const readPreference = options.readPreference;\r\n\r\n    if (topology.isConnected({ readPreference })) return callback(null, null);\r\n    const hrElapsed = process.hrtime(start);\r\n    const elapsed = (hrElapsed[0] * 1e9 + hrElapsed[1]) / 1e6;\r\n    if (elapsed > timeout) return callback(new MongoError('Timed out waiting for connection'));\r\n    waitForTopologyConnected(topology, options, callback);\r\n  }, 3000); // this is an arbitrary wait time to allow SDAM to transition\r\n}\r\n\r\n// Handle new change events. This method brings together the routes from the callback, event emitter, and promise ways of using ChangeStream.\r\nfunction processNewChange(args) {\r\n  const changeStream = args.changeStream;\r\n  const error = args.error;\r\n  const change = args.change;\r\n  const callback = args.callback;\r\n  const eventEmitter = args.eventEmitter || false;\r\n\r\n  // If the changeStream is closed, then it should not process a change.\r\n  if (changeStream.isClosed()) {\r\n    // We do not error in the eventEmitter case.\r\n    if (eventEmitter) {\r\n      return;\r\n    }\r\n\r\n    const error = new MongoError('ChangeStream is closed');\r\n    return typeof callback === 'function'\r\n      ? callback(error, null)\r\n      : changeStream.promiseLibrary.reject(error);\r\n  }\r\n\r\n  const cursor = changeStream.cursor;\r\n  const topology = changeStream.topology;\r\n  const options = changeStream.cursor.options;\r\n\r\n  if (error) {\r\n    if (isResumableError(error) && !changeStream.attemptingResume) {\r\n      changeStream.attemptingResume = true;\r\n\r\n      // stop listening to all events from old cursor\r\n      ['data', 'close', 'end', 'error'].forEach(event =>\r\n        changeStream.cursor.removeAllListeners(event)\r\n      );\r\n\r\n      // close internal cursor, ignore errors\r\n      changeStream.cursor.close();\r\n\r\n      // attempt recreating the cursor\r\n      if (eventEmitter) {\r\n        waitForTopologyConnected(topology, { readPreference: options.readPreference }, err => {\r\n          if (err) {\r\n            changeStream.emit('error', err);\r\n            changeStream.emit('close');\r\n            return;\r\n          }\r\n          changeStream.cursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      if (callback) {\r\n        waitForTopologyConnected(topology, { readPreference: options.readPreference }, err => {\r\n          if (err) return callback(err, null);\r\n\r\n          changeStream.cursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\r\n          changeStream.next(callback);\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n        waitForTopologyConnected(topology, { readPreference: options.readPreference }, err => {\r\n          if (err) return reject(err);\r\n          resolve();\r\n        });\r\n      })\r\n        .then(\r\n          () => (changeStream.cursor = createChangeStreamCursor(changeStream, cursor.resumeOptions))\r\n        )\r\n        .then(() => changeStream.next());\r\n    }\r\n\r\n    if (eventEmitter) return changeStream.emit('error', error);\r\n    if (typeof callback === 'function') return callback(error, null);\r\n    return changeStream.promiseLibrary.reject(error);\r\n  }\r\n\r\n  changeStream.attemptingResume = false;\r\n\r\n  if (change && !change._id) {\r\n    const noResumeTokenError = new Error(\r\n      'A change stream document has been received that lacks a resume token (_id).'\r\n    );\r\n\r\n    if (eventEmitter) return changeStream.emit('error', noResumeTokenError);\r\n    if (typeof callback === 'function') return callback(noResumeTokenError, null);\r\n    return changeStream.promiseLibrary.reject(noResumeTokenError);\r\n  }\r\n\r\n  // cache the resume token\r\n  if (cursor.bufferedCount() === 0 && cursor.cursorState.postBatchResumeToken) {\r\n    cursor.resumeToken = cursor.cursorState.postBatchResumeToken;\r\n  } else {\r\n    cursor.resumeToken = change._id;\r\n  }\r\n\r\n  // wipe the startAtOperationTime if there was one so that there won't be a conflict\r\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\r\n  changeStream.options.startAtOperationTime = undefined;\r\n\r\n  // Return the change\r\n  if (eventEmitter) return changeStream.emit('change', change);\r\n  if (typeof callback === 'function') return callback(error, change);\r\n  return changeStream.promiseLibrary.resolve(change);\r\n}\r\n\r\n/**\r\n * The callback format for results\r\n * @callback ChangeStream~resultCallback\r\n * @param {MongoError} error An error instance representing the error during the execution.\r\n * @param {(object|null)} result The result object if the command was executed successfully.\r\n */\r\n\r\nmodule.exports = ChangeStream;\r\n"]},"metadata":{},"sourceType":"script"}