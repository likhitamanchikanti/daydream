{"ast":null,"code":"'use strict'; // Core module\n\nconst core = require('./lib/core');\n\nconst Instrumentation = require('./lib/apm'); // Set up the connect function\n\n\nconst connect = require('./lib/mongo_client').connect; // Expose error class\n\n\nconnect.MongoError = core.MongoError;\nconnect.MongoNetworkError = core.MongoNetworkError;\nconnect.MongoTimeoutError = core.MongoTimeoutError; // Actual driver classes exported\n\nconnect.Admin = require('./lib/admin');\nconnect.MongoClient = require('./lib/mongo_client');\nconnect.Db = require('./lib/db');\nconnect.Collection = require('./lib/collection');\nconnect.Server = require('./lib/topologies/server');\nconnect.ReplSet = require('./lib/topologies/replset');\nconnect.Mongos = require('./lib/topologies/mongos');\nconnect.ReadPreference = core.ReadPreference;\nconnect.GridStore = require('./lib/gridfs/grid_store');\nconnect.Chunk = require('./lib/gridfs/chunk');\nconnect.Logger = core.Logger;\nconnect.AggregationCursor = require('./lib/aggregation_cursor');\nconnect.CommandCursor = require('./lib/command_cursor');\nconnect.Cursor = require('./lib/cursor');\nconnect.GridFSBucket = require('./lib/gridfs-stream'); // Exported to be used in tests not to be used anywhere else\n\nconnect.CoreServer = core.Server;\nconnect.CoreConnection = core.Connection; // BSON types exported\n\nconnect.Binary = core.BSON.Binary;\nconnect.Code = core.BSON.Code;\nconnect.Map = core.BSON.Map;\nconnect.DBRef = core.BSON.DBRef;\nconnect.Double = core.BSON.Double;\nconnect.Int32 = core.BSON.Int32;\nconnect.Long = core.BSON.Long;\nconnect.MinKey = core.BSON.MinKey;\nconnect.MaxKey = core.BSON.MaxKey;\nconnect.ObjectID = core.BSON.ObjectID;\nconnect.ObjectId = core.BSON.ObjectID;\nconnect.Symbol = core.BSON.Symbol;\nconnect.Timestamp = core.BSON.Timestamp;\nconnect.BSONRegExp = core.BSON.BSONRegExp;\nconnect.Decimal128 = core.BSON.Decimal128; // Add connect method\n\nconnect.connect = connect; // Set up the instrumentation method\n\nconnect.instrument = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  const instrumentation = new Instrumentation();\n  instrumentation.instrument(connect.MongoClient, callback);\n  return instrumentation;\n}; // Set our exports to be the connect function\n\n\nmodule.exports = connect;","map":{"version":3,"sources":["C:/Users/mehta/daydream/node_modules/mongodb/index.js"],"names":["core","require","Instrumentation","connect","MongoError","MongoNetworkError","MongoTimeoutError","Admin","MongoClient","Db","Collection","Server","ReplSet","Mongos","ReadPreference","GridStore","Chunk","Logger","AggregationCursor","CommandCursor","Cursor","GridFSBucket","CoreServer","CoreConnection","Connection","Binary","BSON","Code","Map","DBRef","Double","Int32","Long","MinKey","MaxKey","ObjectID","ObjectId","Symbol","Timestamp","BSONRegExp","Decimal128","instrument","options","callback","instrumentation","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\n// Core module\r\nconst core = require('./lib/core');\r\nconst Instrumentation = require('./lib/apm');\r\n\r\n// Set up the connect function\r\nconst connect = require('./lib/mongo_client').connect;\r\n\r\n// Expose error class\r\nconnect.MongoError = core.MongoError;\r\nconnect.MongoNetworkError = core.MongoNetworkError;\r\nconnect.MongoTimeoutError = core.MongoTimeoutError;\r\n\r\n// Actual driver classes exported\r\nconnect.Admin = require('./lib/admin');\r\nconnect.MongoClient = require('./lib/mongo_client');\r\nconnect.Db = require('./lib/db');\r\nconnect.Collection = require('./lib/collection');\r\nconnect.Server = require('./lib/topologies/server');\r\nconnect.ReplSet = require('./lib/topologies/replset');\r\nconnect.Mongos = require('./lib/topologies/mongos');\r\nconnect.ReadPreference = core.ReadPreference;\r\nconnect.GridStore = require('./lib/gridfs/grid_store');\r\nconnect.Chunk = require('./lib/gridfs/chunk');\r\nconnect.Logger = core.Logger;\r\nconnect.AggregationCursor = require('./lib/aggregation_cursor');\r\nconnect.CommandCursor = require('./lib/command_cursor');\r\nconnect.Cursor = require('./lib/cursor');\r\nconnect.GridFSBucket = require('./lib/gridfs-stream');\r\n// Exported to be used in tests not to be used anywhere else\r\nconnect.CoreServer = core.Server;\r\nconnect.CoreConnection = core.Connection;\r\n\r\n// BSON types exported\r\nconnect.Binary = core.BSON.Binary;\r\nconnect.Code = core.BSON.Code;\r\nconnect.Map = core.BSON.Map;\r\nconnect.DBRef = core.BSON.DBRef;\r\nconnect.Double = core.BSON.Double;\r\nconnect.Int32 = core.BSON.Int32;\r\nconnect.Long = core.BSON.Long;\r\nconnect.MinKey = core.BSON.MinKey;\r\nconnect.MaxKey = core.BSON.MaxKey;\r\nconnect.ObjectID = core.BSON.ObjectID;\r\nconnect.ObjectId = core.BSON.ObjectID;\r\nconnect.Symbol = core.BSON.Symbol;\r\nconnect.Timestamp = core.BSON.Timestamp;\r\nconnect.BSONRegExp = core.BSON.BSONRegExp;\r\nconnect.Decimal128 = core.BSON.Decimal128;\r\n\r\n// Add connect method\r\nconnect.connect = connect;\r\n\r\n// Set up the instrumentation method\r\nconnect.instrument = function(options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n\r\n  const instrumentation = new Instrumentation();\r\n  instrumentation.instrument(connect.MongoClient, callback);\r\n  return instrumentation;\r\n};\r\n\r\n// Set our exports to be the connect function\r\nmodule.exports = connect;\r\n"]},"metadata":{},"sourceType":"script"}