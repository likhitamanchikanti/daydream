{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\n/**\r\n * Creates a new MongoCR authentication mechanism\r\n *\r\n * @extends AuthProvider\r\n */\n\n\nclass MongoCR extends AuthProvider {\n  /**\r\n   * Implementation of authentication for a single connection\r\n   * @override\r\n   */\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n    sendAuthCommand(connection, `${source}.$cmd`, {\n      getnonce: 1\n    }, (err, r) => {\n      let nonce = null;\n      let key = null; // Get nonce\n\n      if (err == null) {\n        nonce = r.nonce; // Use node md5 generator\n\n        let md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n        md5.update(username + ':mongo:' + password, 'utf8');\n        const hash_password = md5.digest('hex'); // Final key\n\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n      sendAuthCommand(connection, `${source}.$cmd`, authenticateCommand, callback);\n    });\n  }\n\n}\n\nmodule.exports = MongoCR;","map":{"version":3,"sources":["C:/Users/mehta/daydream/node_modules/mongodb/lib/core/auth/mongocr.js"],"names":["crypto","require","AuthProvider","MongoCR","_authenticateSingleConnection","sendAuthCommand","connection","credentials","callback","username","password","source","getnonce","err","r","nonce","key","md5","createHash","update","hash_password","digest","authenticateCommand","authenticate","user","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAAP,CAA2BC,YAAhD;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,OAAN,SAAsBD,YAAtB,CAAmC;AACjC;AACF;AACA;AACA;AACEE,EAAAA,6BAA6B,CAACC,eAAD,EAAkBC,UAAlB,EAA8BC,WAA9B,EAA2CC,QAA3C,EAAqD;AAChF,UAAMC,QAAQ,GAAGF,WAAW,CAACE,QAA7B;AACA,UAAMC,QAAQ,GAAGH,WAAW,CAACG,QAA7B;AACA,UAAMC,MAAM,GAAGJ,WAAW,CAACI,MAA3B;AAEAN,IAAAA,eAAe,CAACC,UAAD,EAAc,GAAEK,MAAO,OAAvB,EAA+B;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAA/B,EAAgD,CAACC,GAAD,EAAMC,CAAN,KAAY;AACzE,UAAIC,KAAK,GAAG,IAAZ;AACA,UAAIC,GAAG,GAAG,IAAV,CAFyE,CAIzE;;AACA,UAAIH,GAAG,IAAI,IAAX,EAAiB;AACfE,QAAAA,KAAK,GAAGD,CAAC,CAACC,KAAV,CADe,CAEf;;AACA,YAAIE,GAAG,GAAGjB,MAAM,CAACkB,UAAP,CAAkB,KAAlB,CAAV,CAHe,CAIf;;AACAD,QAAAA,GAAG,CAACE,MAAJ,CAAWV,QAAQ,GAAG,SAAX,GAAuBC,QAAlC,EAA4C,MAA5C;AACA,cAAMU,aAAa,GAAGH,GAAG,CAACI,MAAJ,CAAW,KAAX,CAAtB,CANe,CAOf;;AACAJ,QAAAA,GAAG,GAAGjB,MAAM,CAACkB,UAAP,CAAkB,KAAlB,CAAN;AACAD,QAAAA,GAAG,CAACE,MAAJ,CAAWJ,KAAK,GAAGN,QAAR,GAAmBW,aAA9B,EAA6C,MAA7C;AACAJ,QAAAA,GAAG,GAAGC,GAAG,CAACI,MAAJ,CAAW,KAAX,CAAN;AACD;;AAED,YAAMC,mBAAmB,GAAG;AAC1BC,QAAAA,YAAY,EAAE,CADY;AAE1BC,QAAAA,IAAI,EAAEf,QAFoB;AAG1BM,QAAAA,KAH0B;AAI1BC,QAAAA;AAJ0B,OAA5B;AAOAX,MAAAA,eAAe,CAACC,UAAD,EAAc,GAAEK,MAAO,OAAvB,EAA+BW,mBAA/B,EAAoDd,QAApD,CAAf;AACD,KA1Bc,CAAf;AA2BD;;AArCgC;;AAwCnCiB,MAAM,CAACC,OAAP,GAAiBvB,OAAjB","sourcesContent":["'use strict';\r\n\r\nconst crypto = require('crypto');\r\nconst AuthProvider = require('./auth_provider').AuthProvider;\r\n\r\n/**\r\n * Creates a new MongoCR authentication mechanism\r\n *\r\n * @extends AuthProvider\r\n */\r\nclass MongoCR extends AuthProvider {\r\n  /**\r\n   * Implementation of authentication for a single connection\r\n   * @override\r\n   */\r\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\r\n    const username = credentials.username;\r\n    const password = credentials.password;\r\n    const source = credentials.source;\r\n\r\n    sendAuthCommand(connection, `${source}.$cmd`, { getnonce: 1 }, (err, r) => {\r\n      let nonce = null;\r\n      let key = null;\r\n\r\n      // Get nonce\r\n      if (err == null) {\r\n        nonce = r.nonce;\r\n        // Use node md5 generator\r\n        let md5 = crypto.createHash('md5');\r\n        // Generate keys used for authentication\r\n        md5.update(username + ':mongo:' + password, 'utf8');\r\n        const hash_password = md5.digest('hex');\r\n        // Final key\r\n        md5 = crypto.createHash('md5');\r\n        md5.update(nonce + username + hash_password, 'utf8');\r\n        key = md5.digest('hex');\r\n      }\r\n\r\n      const authenticateCommand = {\r\n        authenticate: 1,\r\n        user: username,\r\n        nonce,\r\n        key\r\n      };\r\n\r\n      sendAuthCommand(connection, `${source}.$cmd`, authenticateCommand, callback);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = MongoCR;\r\n"]},"metadata":{},"sourceType":"script"}