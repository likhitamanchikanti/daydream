{"ast":null,"code":"'use strict';\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\n\nconst retrieveKerberos = require('../utils').retrieveKerberos;\n\nlet kerberos;\n/**\r\n * Creates a new GSSAPI authentication mechanism\r\n * @class\r\n * @extends AuthProvider\r\n */\n\nclass GSSAPI extends AuthProvider {\n  /**\r\n   * Implementation of authentication for a single connection\r\n   * @override\r\n   */\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n    const source = credentials.source;\n    const username = credentials.username;\n    const password = credentials.password;\n    const mechanismProperties = credentials.mechanismProperties;\n    const gssapiServiceName = mechanismProperties['gssapiservicename'] || mechanismProperties['gssapiServiceName'] || 'mongodb';\n    GSSAPIInitialize(this, kerberos.processes.MongoAuthProcess, source, username, password, source, gssapiServiceName, sendAuthCommand, connection, mechanismProperties, callback);\n  }\n  /**\r\n   * Authenticate\r\n   * @override\r\n   * @method\r\n   */\n\n\n  auth(sendAuthCommand, connections, credentials, callback) {\n    if (kerberos == null) {\n      try {\n        kerberos = retrieveKerberos();\n      } catch (e) {\n        return callback(e, null);\n      }\n    }\n\n    super.auth(sendAuthCommand, connections, credentials, callback);\n  }\n\n} //\n// Initialize step\n\n\nvar GSSAPIInitialize = function (self, MongoAuthProcess, db, username, password, authdb, gssapiServiceName, sendAuthCommand, connection, options, callback) {\n  // Create authenticator\n  var mongo_auth_process = new MongoAuthProcess(connection.host, connection.port, gssapiServiceName, options); // Perform initialization\n\n  mongo_auth_process.init(username, password, function (err) {\n    if (err) return callback(err, false); // Perform the first step\n\n    mongo_auth_process.transition('', function (err, payload) {\n      if (err) return callback(err, false); // Call the next db step\n\n      MongoDBGSSAPIFirstStep(self, mongo_auth_process, payload, db, username, password, authdb, sendAuthCommand, connection, callback);\n    });\n  });\n}; //\n// Perform first step against mongodb\n\n\nvar MongoDBGSSAPIFirstStep = function (self, mongo_auth_process, payload, db, username, password, authdb, sendAuthCommand, connection, callback) {\n  // Build the sasl start command\n  var command = {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload: payload,\n    autoAuthorize: 1\n  }; // Write the commmand on the connection\n\n  sendAuthCommand(connection, '$external.$cmd', command, (err, doc) => {\n    if (err) return callback(err, false); // Execute mongodb transition\n\n    mongo_auth_process.transition(doc.payload, function (err, payload) {\n      if (err) return callback(err, false); // MongoDB API Second Step\n\n      MongoDBGSSAPISecondStep(self, mongo_auth_process, payload, doc, db, username, password, authdb, sendAuthCommand, connection, callback);\n    });\n  });\n}; //\n// Perform first step against mongodb\n\n\nvar MongoDBGSSAPISecondStep = function (self, mongo_auth_process, payload, doc, db, username, password, authdb, sendAuthCommand, connection, callback) {\n  // Build Authentication command to send to MongoDB\n  var command = {\n    saslContinue: 1,\n    conversationId: doc.conversationId,\n    payload: payload\n  }; // Execute the command\n  // Write the commmand on the connection\n\n  sendAuthCommand(connection, '$external.$cmd', command, (err, doc) => {\n    if (err) return callback(err, false); // Call next transition for kerberos\n\n    mongo_auth_process.transition(doc.payload, function (err, payload) {\n      if (err) return callback(err, false); // Call the last and third step\n\n      MongoDBGSSAPIThirdStep(self, mongo_auth_process, payload, doc, db, username, password, authdb, sendAuthCommand, connection, callback);\n    });\n  });\n};\n\nvar MongoDBGSSAPIThirdStep = function (self, mongo_auth_process, payload, doc, db, username, password, authdb, sendAuthCommand, connection, callback) {\n  // Build final command\n  var command = {\n    saslContinue: 1,\n    conversationId: doc.conversationId,\n    payload: payload\n  }; // Execute the command\n\n  sendAuthCommand(connection, '$external.$cmd', command, (err, r) => {\n    if (err) return callback(err, false);\n    mongo_auth_process.transition(null, function (err) {\n      if (err) return callback(err, null);\n      callback(null, r);\n    });\n  });\n};\n/**\r\n * This is a result from a authentication strategy\r\n *\r\n * @callback authResultCallback\r\n * @param {error} error An error object. Set to null if no error present\r\n * @param {boolean} result The result of the authentication process\r\n */\n\n\nmodule.exports = GSSAPI;","map":{"version":3,"sources":["C:/Users/mehta/daydream/node_modules/mongodb/lib/core/auth/gssapi.js"],"names":["AuthProvider","require","retrieveKerberos","kerberos","GSSAPI","_authenticateSingleConnection","sendAuthCommand","connection","credentials","callback","source","username","password","mechanismProperties","gssapiServiceName","GSSAPIInitialize","processes","MongoAuthProcess","auth","connections","e","self","db","authdb","options","mongo_auth_process","host","port","init","err","transition","payload","MongoDBGSSAPIFirstStep","command","saslStart","mechanism","autoAuthorize","doc","MongoDBGSSAPISecondStep","saslContinue","conversationId","MongoDBGSSAPIThirdStep","r","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst AuthProvider = require('./auth_provider').AuthProvider;\r\nconst retrieveKerberos = require('../utils').retrieveKerberos;\r\nlet kerberos;\r\n\r\n/**\r\n * Creates a new GSSAPI authentication mechanism\r\n * @class\r\n * @extends AuthProvider\r\n */\r\nclass GSSAPI extends AuthProvider {\r\n  /**\r\n   * Implementation of authentication for a single connection\r\n   * @override\r\n   */\r\n  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\r\n    const source = credentials.source;\r\n    const username = credentials.username;\r\n    const password = credentials.password;\r\n    const mechanismProperties = credentials.mechanismProperties;\r\n    const gssapiServiceName =\r\n      mechanismProperties['gssapiservicename'] ||\r\n      mechanismProperties['gssapiServiceName'] ||\r\n      'mongodb';\r\n\r\n    GSSAPIInitialize(\r\n      this,\r\n      kerberos.processes.MongoAuthProcess,\r\n      source,\r\n      username,\r\n      password,\r\n      source,\r\n      gssapiServiceName,\r\n      sendAuthCommand,\r\n      connection,\r\n      mechanismProperties,\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Authenticate\r\n   * @override\r\n   * @method\r\n   */\r\n  auth(sendAuthCommand, connections, credentials, callback) {\r\n    if (kerberos == null) {\r\n      try {\r\n        kerberos = retrieveKerberos();\r\n      } catch (e) {\r\n        return callback(e, null);\r\n      }\r\n    }\r\n\r\n    super.auth(sendAuthCommand, connections, credentials, callback);\r\n  }\r\n}\r\n\r\n//\r\n// Initialize step\r\nvar GSSAPIInitialize = function(\r\n  self,\r\n  MongoAuthProcess,\r\n  db,\r\n  username,\r\n  password,\r\n  authdb,\r\n  gssapiServiceName,\r\n  sendAuthCommand,\r\n  connection,\r\n  options,\r\n  callback\r\n) {\r\n  // Create authenticator\r\n  var mongo_auth_process = new MongoAuthProcess(\r\n    connection.host,\r\n    connection.port,\r\n    gssapiServiceName,\r\n    options\r\n  );\r\n\r\n  // Perform initialization\r\n  mongo_auth_process.init(username, password, function(err) {\r\n    if (err) return callback(err, false);\r\n\r\n    // Perform the first step\r\n    mongo_auth_process.transition('', function(err, payload) {\r\n      if (err) return callback(err, false);\r\n\r\n      // Call the next db step\r\n      MongoDBGSSAPIFirstStep(\r\n        self,\r\n        mongo_auth_process,\r\n        payload,\r\n        db,\r\n        username,\r\n        password,\r\n        authdb,\r\n        sendAuthCommand,\r\n        connection,\r\n        callback\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\n//\r\n// Perform first step against mongodb\r\nvar MongoDBGSSAPIFirstStep = function(\r\n  self,\r\n  mongo_auth_process,\r\n  payload,\r\n  db,\r\n  username,\r\n  password,\r\n  authdb,\r\n  sendAuthCommand,\r\n  connection,\r\n  callback\r\n) {\r\n  // Build the sasl start command\r\n  var command = {\r\n    saslStart: 1,\r\n    mechanism: 'GSSAPI',\r\n    payload: payload,\r\n    autoAuthorize: 1\r\n  };\r\n\r\n  // Write the commmand on the connection\r\n  sendAuthCommand(connection, '$external.$cmd', command, (err, doc) => {\r\n    if (err) return callback(err, false);\r\n    // Execute mongodb transition\r\n    mongo_auth_process.transition(doc.payload, function(err, payload) {\r\n      if (err) return callback(err, false);\r\n\r\n      // MongoDB API Second Step\r\n      MongoDBGSSAPISecondStep(\r\n        self,\r\n        mongo_auth_process,\r\n        payload,\r\n        doc,\r\n        db,\r\n        username,\r\n        password,\r\n        authdb,\r\n        sendAuthCommand,\r\n        connection,\r\n        callback\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\n//\r\n// Perform first step against mongodb\r\nvar MongoDBGSSAPISecondStep = function(\r\n  self,\r\n  mongo_auth_process,\r\n  payload,\r\n  doc,\r\n  db,\r\n  username,\r\n  password,\r\n  authdb,\r\n  sendAuthCommand,\r\n  connection,\r\n  callback\r\n) {\r\n  // Build Authentication command to send to MongoDB\r\n  var command = {\r\n    saslContinue: 1,\r\n    conversationId: doc.conversationId,\r\n    payload: payload\r\n  };\r\n\r\n  // Execute the command\r\n  // Write the commmand on the connection\r\n  sendAuthCommand(connection, '$external.$cmd', command, (err, doc) => {\r\n    if (err) return callback(err, false);\r\n    // Call next transition for kerberos\r\n    mongo_auth_process.transition(doc.payload, function(err, payload) {\r\n      if (err) return callback(err, false);\r\n\r\n      // Call the last and third step\r\n      MongoDBGSSAPIThirdStep(\r\n        self,\r\n        mongo_auth_process,\r\n        payload,\r\n        doc,\r\n        db,\r\n        username,\r\n        password,\r\n        authdb,\r\n        sendAuthCommand,\r\n        connection,\r\n        callback\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nvar MongoDBGSSAPIThirdStep = function(\r\n  self,\r\n  mongo_auth_process,\r\n  payload,\r\n  doc,\r\n  db,\r\n  username,\r\n  password,\r\n  authdb,\r\n  sendAuthCommand,\r\n  connection,\r\n  callback\r\n) {\r\n  // Build final command\r\n  var command = {\r\n    saslContinue: 1,\r\n    conversationId: doc.conversationId,\r\n    payload: payload\r\n  };\r\n\r\n  // Execute the command\r\n  sendAuthCommand(connection, '$external.$cmd', command, (err, r) => {\r\n    if (err) return callback(err, false);\r\n    mongo_auth_process.transition(null, function(err) {\r\n      if (err) return callback(err, null);\r\n      callback(null, r);\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * This is a result from a authentication strategy\r\n *\r\n * @callback authResultCallback\r\n * @param {error} error An error object. Set to null if no error present\r\n * @param {boolean} result The result of the authentication process\r\n */\r\n\r\nmodule.exports = GSSAPI;\r\n"]},"metadata":{},"sourceType":"script"}