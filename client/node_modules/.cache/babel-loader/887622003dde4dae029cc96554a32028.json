{"ast":null,"code":"'use strict';\n\nconst applyWriteConcern = require('../utils').applyWriteConcern;\n\nconst Code = require('../core').BSON.Code;\n\nconst decorateWithCollation = require('../utils').decorateWithCollation;\n\nconst decorateWithReadConcern = require('../utils').decorateWithReadConcern;\n\nconst executeCommand = require('./db_ops').executeCommand;\n\nconst handleCallback = require('../utils').handleCallback;\n\nconst isObject = require('../utils').isObject;\n\nconst loadDb = require('../dynamic_loaders').loadDb;\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst resolveReadPreference = require('../utils').resolveReadPreference;\n\nconst toError = require('../utils').toError;\n\nconst exclusionList = ['readPreference', 'session', 'bypassDocumentValidation', 'w', 'wtimeout', 'j', 'writeConcern'];\n/**\r\n * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n *\r\n * @class\r\n * @property {Collection} a Collection instance.\r\n * @property {(function|string)} map The mapping function.\r\n * @property {(function|string)} reduce The reduce function.\r\n * @property {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\r\n */\n\nclass MapReduceOperation extends OperationBase {\n  /**\r\n   * Constructs a MapReduce operation.\r\n   *\r\n   * @param {Collection} a Collection instance.\r\n   * @param {(function|string)} map The mapping function.\r\n   * @param {(function|string)} reduce The reduce function.\r\n   * @param {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\r\n   */\n  constructor(collection, map, reduce, options) {\n    super(options);\n    this.collection = collection;\n    this.map = map;\n    this.reduce = reduce;\n  }\n  /**\r\n   * Execute the operation.\r\n   *\r\n   * @param {Collection~resultCallback} [callback] The command result callback\r\n   */\n\n\n  execute(callback) {\n    const coll = this.collection;\n    const map = this.map;\n    const reduce = this.reduce;\n    let options = this.options;\n    const mapCommandHash = {\n      mapreduce: coll.collectionName,\n      map: map,\n      reduce: reduce\n    }; // Add any other options passed in\n\n    for (let n in options) {\n      if ('scope' === n) {\n        mapCommandHash[n] = processScope(options[n]);\n      } else {\n        // Only include if not in exclusion list\n        if (exclusionList.indexOf(n) === -1) {\n          mapCommandHash[n] = options[n];\n        }\n      }\n    }\n\n    options = Object.assign({}, options); // Ensure we have the right read preference inheritance\n\n    options.readPreference = resolveReadPreference(coll, options); // If we have a read preference and inline is not set as output fail hard\n\n    if (options.readPreference !== false && options.readPreference !== 'primary' && options['out'] && options['out'].inline !== 1 && options['out'] !== 'inline') {\n      // Force readPreference to primary\n      options.readPreference = 'primary'; // Decorate command with writeConcern if supported\n\n      applyWriteConcern(mapCommandHash, {\n        db: coll.s.db,\n        collection: coll\n      }, options);\n    } else {\n      decorateWithReadConcern(mapCommandHash, coll, options);\n    } // Is bypassDocumentValidation specified\n\n\n    if (options.bypassDocumentValidation === true) {\n      mapCommandHash.bypassDocumentValidation = options.bypassDocumentValidation;\n    } // Have we specified collation\n\n\n    try {\n      decorateWithCollation(mapCommandHash, coll, options);\n    } catch (err) {\n      return callback(err, null);\n    } // Execute command\n\n\n    executeCommand(coll.s.db, mapCommandHash, options, (err, result) => {\n      if (err) return handleCallback(callback, err); // Check if we have an error\n\n      if (1 !== result.ok || result.err || result.errmsg) {\n        return handleCallback(callback, toError(result));\n      } // Create statistics value\n\n\n      const stats = {};\n      if (result.timeMillis) stats['processtime'] = result.timeMillis;\n      if (result.counts) stats['counts'] = result.counts;\n      if (result.timing) stats['timing'] = result.timing; // invoked with inline?\n\n      if (result.results) {\n        // If we wish for no verbosity\n        if (options['verbose'] == null || !options['verbose']) {\n          return handleCallback(callback, null, result.results);\n        }\n\n        return handleCallback(callback, null, {\n          results: result.results,\n          stats: stats\n        });\n      } // The returned collection\n\n\n      let collection = null; // If we have an object it's a different db\n\n      if (result.result != null && typeof result.result === 'object') {\n        const doc = result.result; // Return a collection from another db\n\n        let Db = loadDb();\n        collection = new Db(doc.db, coll.s.db.s.topology, coll.s.db.s.options).collection(doc.collection);\n      } else {\n        // Create a collection object that wraps the result collection\n        collection = coll.s.db.collection(result.result);\n      } // If we wish for no verbosity\n\n\n      if (options['verbose'] == null || !options['verbose']) {\n        return handleCallback(callback, err, collection);\n      } // Return stats as third set of values\n\n\n      handleCallback(callback, err, {\n        collection: collection,\n        stats: stats\n      });\n    });\n  }\n\n}\n/**\r\n * Functions that are passed as scope args must\r\n * be converted to Code instances.\r\n * @ignore\r\n */\n\n\nfunction processScope(scope) {\n  if (!isObject(scope) || scope._bsontype === 'ObjectID') {\n    return scope;\n  }\n\n  const keys = Object.keys(scope);\n  let key;\n  const new_scope = {};\n\n  for (let i = keys.length - 1; i >= 0; i--) {\n    key = keys[i];\n\n    if ('function' === typeof scope[key]) {\n      new_scope[key] = new Code(String(scope[key]));\n    } else {\n      new_scope[key] = processScope(scope[key]);\n    }\n  }\n\n  return new_scope;\n}\n\nmodule.exports = MapReduceOperation;","map":{"version":3,"sources":["C:/Users/mehta/daydream/node_modules/mongodb/lib/operations/map_reduce.js"],"names":["applyWriteConcern","require","Code","BSON","decorateWithCollation","decorateWithReadConcern","executeCommand","handleCallback","isObject","loadDb","OperationBase","resolveReadPreference","toError","exclusionList","MapReduceOperation","constructor","collection","map","reduce","options","execute","callback","coll","mapCommandHash","mapreduce","collectionName","n","processScope","indexOf","Object","assign","readPreference","inline","db","s","bypassDocumentValidation","err","result","ok","errmsg","stats","timeMillis","counts","timing","results","doc","Db","topology","scope","_bsontype","keys","key","new_scope","i","length","String","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst applyWriteConcern = require('../utils').applyWriteConcern;\r\nconst Code = require('../core').BSON.Code;\r\nconst decorateWithCollation = require('../utils').decorateWithCollation;\r\nconst decorateWithReadConcern = require('../utils').decorateWithReadConcern;\r\nconst executeCommand = require('./db_ops').executeCommand;\r\nconst handleCallback = require('../utils').handleCallback;\r\nconst isObject = require('../utils').isObject;\r\nconst loadDb = require('../dynamic_loaders').loadDb;\r\nconst OperationBase = require('./operation').OperationBase;\r\nconst resolveReadPreference = require('../utils').resolveReadPreference;\r\nconst toError = require('../utils').toError;\r\n\r\nconst exclusionList = [\r\n  'readPreference',\r\n  'session',\r\n  'bypassDocumentValidation',\r\n  'w',\r\n  'wtimeout',\r\n  'j',\r\n  'writeConcern'\r\n];\r\n\r\n/**\r\n * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n *\r\n * @class\r\n * @property {Collection} a Collection instance.\r\n * @property {(function|string)} map The mapping function.\r\n * @property {(function|string)} reduce The reduce function.\r\n * @property {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\r\n */\r\nclass MapReduceOperation extends OperationBase {\r\n  /**\r\n   * Constructs a MapReduce operation.\r\n   *\r\n   * @param {Collection} a Collection instance.\r\n   * @param {(function|string)} map The mapping function.\r\n   * @param {(function|string)} reduce The reduce function.\r\n   * @param {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\r\n   */\r\n  constructor(collection, map, reduce, options) {\r\n    super(options);\r\n\r\n    this.collection = collection;\r\n    this.map = map;\r\n    this.reduce = reduce;\r\n  }\r\n\r\n  /**\r\n   * Execute the operation.\r\n   *\r\n   * @param {Collection~resultCallback} [callback] The command result callback\r\n   */\r\n  execute(callback) {\r\n    const coll = this.collection;\r\n    const map = this.map;\r\n    const reduce = this.reduce;\r\n    let options = this.options;\r\n\r\n    const mapCommandHash = {\r\n      mapreduce: coll.collectionName,\r\n      map: map,\r\n      reduce: reduce\r\n    };\r\n\r\n    // Add any other options passed in\r\n    for (let n in options) {\r\n      if ('scope' === n) {\r\n        mapCommandHash[n] = processScope(options[n]);\r\n      } else {\r\n        // Only include if not in exclusion list\r\n        if (exclusionList.indexOf(n) === -1) {\r\n          mapCommandHash[n] = options[n];\r\n        }\r\n      }\r\n    }\r\n\r\n    options = Object.assign({}, options);\r\n\r\n    // Ensure we have the right read preference inheritance\r\n    options.readPreference = resolveReadPreference(coll, options);\r\n\r\n    // If we have a read preference and inline is not set as output fail hard\r\n    if (\r\n      options.readPreference !== false &&\r\n      options.readPreference !== 'primary' &&\r\n      options['out'] &&\r\n      (options['out'].inline !== 1 && options['out'] !== 'inline')\r\n    ) {\r\n      // Force readPreference to primary\r\n      options.readPreference = 'primary';\r\n      // Decorate command with writeConcern if supported\r\n      applyWriteConcern(mapCommandHash, { db: coll.s.db, collection: coll }, options);\r\n    } else {\r\n      decorateWithReadConcern(mapCommandHash, coll, options);\r\n    }\r\n\r\n    // Is bypassDocumentValidation specified\r\n    if (options.bypassDocumentValidation === true) {\r\n      mapCommandHash.bypassDocumentValidation = options.bypassDocumentValidation;\r\n    }\r\n\r\n    // Have we specified collation\r\n    try {\r\n      decorateWithCollation(mapCommandHash, coll, options);\r\n    } catch (err) {\r\n      return callback(err, null);\r\n    }\r\n\r\n    // Execute command\r\n    executeCommand(coll.s.db, mapCommandHash, options, (err, result) => {\r\n      if (err) return handleCallback(callback, err);\r\n      // Check if we have an error\r\n      if (1 !== result.ok || result.err || result.errmsg) {\r\n        return handleCallback(callback, toError(result));\r\n      }\r\n\r\n      // Create statistics value\r\n      const stats = {};\r\n      if (result.timeMillis) stats['processtime'] = result.timeMillis;\r\n      if (result.counts) stats['counts'] = result.counts;\r\n      if (result.timing) stats['timing'] = result.timing;\r\n\r\n      // invoked with inline?\r\n      if (result.results) {\r\n        // If we wish for no verbosity\r\n        if (options['verbose'] == null || !options['verbose']) {\r\n          return handleCallback(callback, null, result.results);\r\n        }\r\n\r\n        return handleCallback(callback, null, { results: result.results, stats: stats });\r\n      }\r\n\r\n      // The returned collection\r\n      let collection = null;\r\n\r\n      // If we have an object it's a different db\r\n      if (result.result != null && typeof result.result === 'object') {\r\n        const doc = result.result;\r\n        // Return a collection from another db\r\n        let Db = loadDb();\r\n        collection = new Db(doc.db, coll.s.db.s.topology, coll.s.db.s.options).collection(\r\n          doc.collection\r\n        );\r\n      } else {\r\n        // Create a collection object that wraps the result collection\r\n        collection = coll.s.db.collection(result.result);\r\n      }\r\n\r\n      // If we wish for no verbosity\r\n      if (options['verbose'] == null || !options['verbose']) {\r\n        return handleCallback(callback, err, collection);\r\n      }\r\n\r\n      // Return stats as third set of values\r\n      handleCallback(callback, err, { collection: collection, stats: stats });\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Functions that are passed as scope args must\r\n * be converted to Code instances.\r\n * @ignore\r\n */\r\nfunction processScope(scope) {\r\n  if (!isObject(scope) || scope._bsontype === 'ObjectID') {\r\n    return scope;\r\n  }\r\n\r\n  const keys = Object.keys(scope);\r\n  let key;\r\n  const new_scope = {};\r\n\r\n  for (let i = keys.length - 1; i >= 0; i--) {\r\n    key = keys[i];\r\n    if ('function' === typeof scope[key]) {\r\n      new_scope[key] = new Code(String(scope[key]));\r\n    } else {\r\n      new_scope[key] = processScope(scope[key]);\r\n    }\r\n  }\r\n\r\n  return new_scope;\r\n}\r\n\r\nmodule.exports = MapReduceOperation;\r\n"]},"metadata":{},"sourceType":"script"}