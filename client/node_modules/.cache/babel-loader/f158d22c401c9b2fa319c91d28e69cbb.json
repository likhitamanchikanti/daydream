{"ast":null,"code":"'use strict';\n/**\r\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\r\n * used to construct connections.\r\n * @class\r\n * @param {string} mode A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\r\n * @param {array} tags The tags object\r\n * @param {object} [options] Additional read preference options\r\n * @param {number} [options.maxStalenessSeconds] Max secondary read staleness in seconds, Minimum value is 90 seconds.\r\n * @see https://docs.mongodb.com/manual/core/read-preference/\r\n * @return {ReadPreference}\r\n */\n\nconst ReadPreference = function (mode, tags, options) {\n  if (!ReadPreference.isValid(mode)) {\n    throw new TypeError(`Invalid read preference mode ${mode}`);\n  } // TODO(major): tags MUST be an array of tagsets\n\n\n  if (tags && !Array.isArray(tags)) {\n    console.warn('ReadPreference tags must be an array, this will change in the next major version');\n\n    if (typeof tags.maxStalenessSeconds !== 'undefined') {\n      // this is likely an options object\n      options = tags;\n      tags = undefined;\n    } else {\n      tags = [tags];\n    }\n  }\n\n  this.mode = mode;\n  this.tags = tags;\n  options = options || {};\n\n  if (options.maxStalenessSeconds != null) {\n    if (options.maxStalenessSeconds <= 0) {\n      throw new TypeError('maxStalenessSeconds must be a positive integer');\n    }\n\n    this.maxStalenessSeconds = options.maxStalenessSeconds; // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n    //       topology has a lower value then a MongoError will be thrown during server selection.\n\n    this.minWireVersion = 5;\n  }\n\n  if (this.mode === ReadPreference.PRIMARY) {\n    if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n      throw new TypeError('Primary read preference cannot be combined with tags');\n    }\n\n    if (this.maxStalenessSeconds) {\n      throw new TypeError('Primary read preference cannot be combined with maxStalenessSeconds');\n    }\n  }\n}; // Support the deprecated `preference` property introduced in the porcelain layer\n\n\nObject.defineProperty(ReadPreference.prototype, 'preference', {\n  enumerable: true,\n  get: function () {\n    return this.mode;\n  }\n});\n/*\r\n * Read preference mode constants\r\n */\n\nReadPreference.PRIMARY = 'primary';\nReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';\nReadPreference.SECONDARY = 'secondary';\nReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';\nReadPreference.NEAREST = 'nearest';\nconst VALID_MODES = [ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST, null];\n/**\r\n * Construct a ReadPreference given an options object.\r\n *\r\n * @param {object} options The options object from which to extract the read preference.\r\n * @return {ReadPreference}\r\n */\n\nReadPreference.fromOptions = function (options) {\n  const readPreference = options.readPreference;\n  const readPreferenceTags = options.readPreferenceTags;\n\n  if (readPreference == null) {\n    return null;\n  }\n\n  if (typeof readPreference === 'string') {\n    return new ReadPreference(readPreference, readPreferenceTags);\n  } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n    const mode = readPreference.mode || readPreference.preference;\n\n    if (mode && typeof mode === 'string') {\n      return new ReadPreference(mode, readPreference.tags, {\n        maxStalenessSeconds: readPreference.maxStalenessSeconds\n      });\n    }\n  }\n\n  return readPreference;\n};\n/**\r\n * Validate if a mode is legal\r\n *\r\n * @method\r\n * @param {string} mode The string representing the read preference mode.\r\n * @return {boolean} True if a mode is valid\r\n */\n\n\nReadPreference.isValid = function (mode) {\n  return VALID_MODES.indexOf(mode) !== -1;\n};\n/**\r\n * Validate if a mode is legal\r\n *\r\n * @method\r\n * @param {string} mode The string representing the read preference mode.\r\n * @return {boolean} True if a mode is valid\r\n */\n\n\nReadPreference.prototype.isValid = function (mode) {\n  return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n};\n\nconst needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];\n/**\r\n * Indicates that this readPreference needs the \"slaveOk\" bit when sent over the wire\r\n * @method\r\n * @return {boolean}\r\n * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\r\n */\n\nReadPreference.prototype.slaveOk = function () {\n  return needSlaveOk.indexOf(this.mode) !== -1;\n};\n/**\r\n * Are the two read preference equal\r\n * @method\r\n * @param {ReadPreference} readPreference The read preference with which to check equality\r\n * @return {boolean} True if the two ReadPreferences are equivalent\r\n */\n\n\nReadPreference.prototype.equals = function (readPreference) {\n  return readPreference.mode === this.mode;\n};\n/**\r\n * Return JSON representation\r\n * @method\r\n * @return {Object} A JSON representation of the ReadPreference\r\n */\n\n\nReadPreference.prototype.toJSON = function () {\n  const readPreference = {\n    mode: this.mode\n  };\n  if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n  if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n  return readPreference;\n};\n/**\r\n * Primary read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\n\n\nReadPreference.primary = new ReadPreference('primary');\n/**\r\n * Primary Preferred read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\n\nReadPreference.primaryPreferred = new ReadPreference('primaryPreferred');\n/**\r\n * Secondary read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\n\nReadPreference.secondary = new ReadPreference('secondary');\n/**\r\n * Secondary Preferred read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\n\nReadPreference.secondaryPreferred = new ReadPreference('secondaryPreferred');\n/**\r\n * Nearest read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\n\nReadPreference.nearest = new ReadPreference('nearest');\nmodule.exports = ReadPreference;","map":{"version":3,"sources":["C:/Users/mehta/daydream/node_modules/mongodb/lib/core/topologies/read_preference.js"],"names":["ReadPreference","mode","tags","options","isValid","TypeError","Array","isArray","console","warn","maxStalenessSeconds","undefined","minWireVersion","PRIMARY","length","Object","defineProperty","prototype","enumerable","get","PRIMARY_PREFERRED","SECONDARY","SECONDARY_PREFERRED","NEAREST","VALID_MODES","fromOptions","readPreference","readPreferenceTags","preference","indexOf","needSlaveOk","slaveOk","equals","toJSON","primary","primaryPreferred","secondary","secondaryPreferred","nearest","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\n/**\r\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\r\n * used to construct connections.\r\n * @class\r\n * @param {string} mode A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\r\n * @param {array} tags The tags object\r\n * @param {object} [options] Additional read preference options\r\n * @param {number} [options.maxStalenessSeconds] Max secondary read staleness in seconds, Minimum value is 90 seconds.\r\n * @see https://docs.mongodb.com/manual/core/read-preference/\r\n * @return {ReadPreference}\r\n */\r\nconst ReadPreference = function(mode, tags, options) {\r\n  if (!ReadPreference.isValid(mode)) {\r\n    throw new TypeError(`Invalid read preference mode ${mode}`);\r\n  }\r\n\r\n  // TODO(major): tags MUST be an array of tagsets\r\n  if (tags && !Array.isArray(tags)) {\r\n    console.warn(\r\n      'ReadPreference tags must be an array, this will change in the next major version'\r\n    );\r\n\r\n    if (typeof tags.maxStalenessSeconds !== 'undefined') {\r\n      // this is likely an options object\r\n      options = tags;\r\n      tags = undefined;\r\n    } else {\r\n      tags = [tags];\r\n    }\r\n  }\r\n\r\n  this.mode = mode;\r\n  this.tags = tags;\r\n\r\n  options = options || {};\r\n  if (options.maxStalenessSeconds != null) {\r\n    if (options.maxStalenessSeconds <= 0) {\r\n      throw new TypeError('maxStalenessSeconds must be a positive integer');\r\n    }\r\n\r\n    this.maxStalenessSeconds = options.maxStalenessSeconds;\r\n\r\n    // NOTE: The minimum required wire version is 5 for this read preference. If the existing\r\n    //       topology has a lower value then a MongoError will be thrown during server selection.\r\n    this.minWireVersion = 5;\r\n  }\r\n\r\n  if (this.mode === ReadPreference.PRIMARY) {\r\n    if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\r\n      throw new TypeError('Primary read preference cannot be combined with tags');\r\n    }\r\n\r\n    if (this.maxStalenessSeconds) {\r\n      throw new TypeError('Primary read preference cannot be combined with maxStalenessSeconds');\r\n    }\r\n  }\r\n};\r\n\r\n// Support the deprecated `preference` property introduced in the porcelain layer\r\nObject.defineProperty(ReadPreference.prototype, 'preference', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return this.mode;\r\n  }\r\n});\r\n\r\n/*\r\n * Read preference mode constants\r\n */\r\nReadPreference.PRIMARY = 'primary';\r\nReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';\r\nReadPreference.SECONDARY = 'secondary';\r\nReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';\r\nReadPreference.NEAREST = 'nearest';\r\n\r\nconst VALID_MODES = [\r\n  ReadPreference.PRIMARY,\r\n  ReadPreference.PRIMARY_PREFERRED,\r\n  ReadPreference.SECONDARY,\r\n  ReadPreference.SECONDARY_PREFERRED,\r\n  ReadPreference.NEAREST,\r\n  null\r\n];\r\n\r\n/**\r\n * Construct a ReadPreference given an options object.\r\n *\r\n * @param {object} options The options object from which to extract the read preference.\r\n * @return {ReadPreference}\r\n */\r\nReadPreference.fromOptions = function(options) {\r\n  const readPreference = options.readPreference;\r\n  const readPreferenceTags = options.readPreferenceTags;\r\n\r\n  if (readPreference == null) {\r\n    return null;\r\n  }\r\n\r\n  if (typeof readPreference === 'string') {\r\n    return new ReadPreference(readPreference, readPreferenceTags);\r\n  } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\r\n    const mode = readPreference.mode || readPreference.preference;\r\n    if (mode && typeof mode === 'string') {\r\n      return new ReadPreference(mode, readPreference.tags, {\r\n        maxStalenessSeconds: readPreference.maxStalenessSeconds\r\n      });\r\n    }\r\n  }\r\n\r\n  return readPreference;\r\n};\r\n\r\n/**\r\n * Validate if a mode is legal\r\n *\r\n * @method\r\n * @param {string} mode The string representing the read preference mode.\r\n * @return {boolean} True if a mode is valid\r\n */\r\nReadPreference.isValid = function(mode) {\r\n  return VALID_MODES.indexOf(mode) !== -1;\r\n};\r\n\r\n/**\r\n * Validate if a mode is legal\r\n *\r\n * @method\r\n * @param {string} mode The string representing the read preference mode.\r\n * @return {boolean} True if a mode is valid\r\n */\r\nReadPreference.prototype.isValid = function(mode) {\r\n  return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\r\n};\r\n\r\nconst needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];\r\n\r\n/**\r\n * Indicates that this readPreference needs the \"slaveOk\" bit when sent over the wire\r\n * @method\r\n * @return {boolean}\r\n * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\r\n */\r\nReadPreference.prototype.slaveOk = function() {\r\n  return needSlaveOk.indexOf(this.mode) !== -1;\r\n};\r\n\r\n/**\r\n * Are the two read preference equal\r\n * @method\r\n * @param {ReadPreference} readPreference The read preference with which to check equality\r\n * @return {boolean} True if the two ReadPreferences are equivalent\r\n */\r\nReadPreference.prototype.equals = function(readPreference) {\r\n  return readPreference.mode === this.mode;\r\n};\r\n\r\n/**\r\n * Return JSON representation\r\n * @method\r\n * @return {Object} A JSON representation of the ReadPreference\r\n */\r\nReadPreference.prototype.toJSON = function() {\r\n  const readPreference = { mode: this.mode };\r\n  if (Array.isArray(this.tags)) readPreference.tags = this.tags;\r\n  if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\r\n  return readPreference;\r\n};\r\n\r\n/**\r\n * Primary read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\r\nReadPreference.primary = new ReadPreference('primary');\r\n/**\r\n * Primary Preferred read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\r\nReadPreference.primaryPreferred = new ReadPreference('primaryPreferred');\r\n/**\r\n * Secondary read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\r\nReadPreference.secondary = new ReadPreference('secondary');\r\n/**\r\n * Secondary Preferred read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\r\nReadPreference.secondaryPreferred = new ReadPreference('secondaryPreferred');\r\n/**\r\n * Nearest read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\r\nReadPreference.nearest = new ReadPreference('nearest');\r\n\r\nmodule.exports = ReadPreference;\r\n"]},"metadata":{},"sourceType":"script"}