{"ast":null,"code":"'use strict';\n\nconst Aspect = require('./operation').Aspect;\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst handleCallback = require('../utils').handleCallback;\n\nconst CursorState = require('../core/cursor').CursorState;\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst push = Array.prototype.push;\n\nclass ToArrayOperation extends OperationBase {\n  constructor(cursor) {\n    super();\n    this.cursor = cursor;\n  }\n\n  execute(callback) {\n    const cursor = this.cursor;\n    const items = []; // Reset cursor\n\n    cursor.rewind();\n    cursor.s.state = CursorState.INIT; // Fetch all the documents\n\n    const fetchDocs = () => {\n      cursor._next((err, doc) => {\n        if (err) {\n          return cursor._endSession ? cursor._endSession(() => handleCallback(callback, err)) : handleCallback(callback, err);\n        }\n\n        if (doc == null) {\n          return cursor.close({\n            skipKillCursors: true\n          }, () => handleCallback(callback, null, items));\n        } // Add doc to items\n\n\n        items.push(doc); // Get all buffered objects\n\n        if (cursor.bufferedCount() > 0) {\n          let docs = cursor.readBufferedDocuments(cursor.bufferedCount()); // Transform the doc if transform method added\n\n          if (cursor.s.transforms && typeof cursor.s.transforms.doc === 'function') {\n            docs = docs.map(cursor.s.transforms.doc);\n          }\n\n          push.apply(items, docs);\n        } // Attempt a fetch\n\n\n        fetchDocs();\n      });\n    };\n\n    fetchDocs();\n  }\n\n}\n\ndefineAspects(ToArrayOperation, Aspect.SKIP_SESSION);\nmodule.exports = ToArrayOperation;","map":{"version":3,"sources":["C:/Users/mehta/daydream/node_modules/mongodb/lib/operations/to_array.js"],"names":["Aspect","require","defineAspects","handleCallback","CursorState","OperationBase","push","Array","prototype","ToArrayOperation","constructor","cursor","execute","callback","items","rewind","s","state","INIT","fetchDocs","_next","err","doc","_endSession","close","skipKillCursors","bufferedCount","docs","readBufferedDocuments","transforms","map","apply","SKIP_SESSION","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,MAAtC;;AACA,MAAME,aAAa,GAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBC,aAA7C;;AACA,MAAMC,cAAc,GAAGF,OAAO,CAAC,UAAD,CAAP,CAAoBE,cAA3C;;AACA,MAAMC,WAAW,GAAGH,OAAO,CAAC,gBAAD,CAAP,CAA0BG,WAA9C;;AACA,MAAMC,aAAa,GAAGJ,OAAO,CAAC,aAAD,CAAP,CAAuBI,aAA7C;;AACA,MAAMC,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBF,IAA7B;;AAEA,MAAMG,gBAAN,SAA+BJ,aAA/B,CAA6C;AAC3CK,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB;AAEA,SAAKA,MAAL,GAAcA,MAAd;AACD;;AAEDC,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB,UAAMF,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMG,KAAK,GAAG,EAAd,CAFgB,CAIhB;;AACAH,IAAAA,MAAM,CAACI,MAAP;AACAJ,IAAAA,MAAM,CAACK,CAAP,CAASC,KAAT,GAAiBb,WAAW,CAACc,IAA7B,CANgB,CAQhB;;AACA,UAAMC,SAAS,GAAG,MAAM;AACtBR,MAAAA,MAAM,CAACS,KAAP,CAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzB,YAAID,GAAJ,EAAS;AACP,iBAAOV,MAAM,CAACY,WAAP,GACHZ,MAAM,CAACY,WAAP,CAAmB,MAAMpB,cAAc,CAACU,QAAD,EAAWQ,GAAX,CAAvC,CADG,GAEHlB,cAAc,CAACU,QAAD,EAAWQ,GAAX,CAFlB;AAGD;;AAED,YAAIC,GAAG,IAAI,IAAX,EAAiB;AACf,iBAAOX,MAAM,CAACa,KAAP,CAAa;AAAEC,YAAAA,eAAe,EAAE;AAAnB,WAAb,EAAwC,MAC7CtB,cAAc,CAACU,QAAD,EAAW,IAAX,EAAiBC,KAAjB,CADT,CAAP;AAGD,SAXwB,CAazB;;;AACAA,QAAAA,KAAK,CAACR,IAAN,CAAWgB,GAAX,EAdyB,CAgBzB;;AACA,YAAIX,MAAM,CAACe,aAAP,KAAyB,CAA7B,EAAgC;AAC9B,cAAIC,IAAI,GAAGhB,MAAM,CAACiB,qBAAP,CAA6BjB,MAAM,CAACe,aAAP,EAA7B,CAAX,CAD8B,CAG9B;;AACA,cAAIf,MAAM,CAACK,CAAP,CAASa,UAAT,IAAuB,OAAOlB,MAAM,CAACK,CAAP,CAASa,UAAT,CAAoBP,GAA3B,KAAmC,UAA9D,EAA0E;AACxEK,YAAAA,IAAI,GAAGA,IAAI,CAACG,GAAL,CAASnB,MAAM,CAACK,CAAP,CAASa,UAAT,CAAoBP,GAA7B,CAAP;AACD;;AAEDhB,UAAAA,IAAI,CAACyB,KAAL,CAAWjB,KAAX,EAAkBa,IAAlB;AACD,SA1BwB,CA4BzB;;;AACAR,QAAAA,SAAS;AACV,OA9BD;AA+BD,KAhCD;;AAkCAA,IAAAA,SAAS;AACV;;AAnD0C;;AAsD7CjB,aAAa,CAACO,gBAAD,EAAmBT,MAAM,CAACgC,YAA1B,CAAb;AAEAC,MAAM,CAACC,OAAP,GAAiBzB,gBAAjB","sourcesContent":["'use strict';\r\n\r\nconst Aspect = require('./operation').Aspect;\r\nconst defineAspects = require('./operation').defineAspects;\r\nconst handleCallback = require('../utils').handleCallback;\r\nconst CursorState = require('../core/cursor').CursorState;\r\nconst OperationBase = require('./operation').OperationBase;\r\nconst push = Array.prototype.push;\r\n\r\nclass ToArrayOperation extends OperationBase {\r\n  constructor(cursor) {\r\n    super();\r\n\r\n    this.cursor = cursor;\r\n  }\r\n\r\n  execute(callback) {\r\n    const cursor = this.cursor;\r\n    const items = [];\r\n\r\n    // Reset cursor\r\n    cursor.rewind();\r\n    cursor.s.state = CursorState.INIT;\r\n\r\n    // Fetch all the documents\r\n    const fetchDocs = () => {\r\n      cursor._next((err, doc) => {\r\n        if (err) {\r\n          return cursor._endSession\r\n            ? cursor._endSession(() => handleCallback(callback, err))\r\n            : handleCallback(callback, err);\r\n        }\r\n\r\n        if (doc == null) {\r\n          return cursor.close({ skipKillCursors: true }, () =>\r\n            handleCallback(callback, null, items)\r\n          );\r\n        }\r\n\r\n        // Add doc to items\r\n        items.push(doc);\r\n\r\n        // Get all buffered objects\r\n        if (cursor.bufferedCount() > 0) {\r\n          let docs = cursor.readBufferedDocuments(cursor.bufferedCount());\r\n\r\n          // Transform the doc if transform method added\r\n          if (cursor.s.transforms && typeof cursor.s.transforms.doc === 'function') {\r\n            docs = docs.map(cursor.s.transforms.doc);\r\n          }\r\n\r\n          push.apply(items, docs);\r\n        }\r\n\r\n        // Attempt a fetch\r\n        fetchDocs();\r\n      });\r\n    };\r\n\r\n    fetchDocs();\r\n  }\r\n}\r\n\r\ndefineAspects(ToArrayOperation, Aspect.SKIP_SESSION);\r\n\r\nmodule.exports = ToArrayOperation;\r\n"]},"metadata":{},"sourceType":"script"}