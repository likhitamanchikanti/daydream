{"ast":null,"code":"'use strict';\n\nconst mongoErrorContextSymbol = Symbol('mongoErrorContextSymbol');\n\nconst maxWireVersion = require('./utils').maxWireVersion;\n/**\r\n * Creates a new MongoError\r\n *\r\n * @augments Error\r\n * @param {Error|string|object} message The error message\r\n * @property {string} message The error message\r\n * @property {string} stack The error call stack\r\n */\n\n\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n      this.stack = message.stack;\n    } else {\n      if (typeof message === 'string') {\n        super(message);\n      } else {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n\n        for (var name in message) {\n          this[name] = message[name];\n        }\n      }\n\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = 'MongoError';\n    this[mongoErrorContextSymbol] = this[mongoErrorContextSymbol] || {};\n  }\n  /**\r\n   * Creates a new MongoError object\r\n   *\r\n   * @param {Error|string|object} options The options used to create the error.\r\n   * @return {MongoError} A MongoError instance\r\n   * @deprecated Use `new MongoError()` instead.\r\n   */\n\n\n  static create(options) {\n    return new MongoError(options);\n  }\n\n  hasErrorLabel(label) {\n    return this.errorLabels && this.errorLabels.indexOf(label) !== -1;\n  }\n\n}\n/**\r\n * Creates a new MongoNetworkError\r\n *\r\n * @param {Error|string|object} message The error message\r\n * @property {string} message The error message\r\n * @property {string} stack The error call stack\r\n */\n\n\nclass MongoNetworkError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoNetworkError'; // This is added as part of the transactions specification\n\n    this.errorLabels = ['TransientTransactionError'];\n  }\n\n}\n/**\r\n * An error used when attempting to parse a value (like a connection string)\r\n *\r\n * @param {Error|string|object} message The error message\r\n * @property {string} message The error message\r\n */\n\n\nclass MongoParseError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoParseError';\n  }\n\n}\n/**\r\n * An error signifying a timeout event\r\n *\r\n * @param {Error|string|object} message The error message\r\n * @property {string} message The error message\r\n */\n\n\nclass MongoTimeoutError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoTimeoutError';\n  }\n\n}\n\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n/**\r\n * An error thrown when the server reports a writeConcernError\r\n *\r\n * @param {Error|string|object} message The error message\r\n * @param {object} result The result document (provided if ok: 1)\r\n * @property {string} message The error message\r\n * @property {object} [result] The result document (provided if ok: 1)\r\n */\n\n\nclass MongoWriteConcernError extends MongoError {\n  constructor(message, result) {\n    super(message);\n    this.name = 'MongoWriteConcernError';\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n\n} // see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\n\n\nconst RETRYABLE_ERROR_CODES = new Set([6, // HostUnreachable\n7, // HostNotFound\n89, // NetworkTimeout\n91, // ShutdownInProgress\n189, // PrimarySteppedDown\n9001, // SocketException\n10107, // NotMaster\n11600, // InterruptedAtShutdown\n11602, // InterruptedDueToReplStateChange\n13435, // NotMasterNoSlaveOk\n13436 // NotMasterOrSecondary\n]);\n/**\r\n * Determines whether an error is something the driver should attempt to retry\r\n *\r\n * @param {MongoError|Error} error\r\n */\n\nfunction isRetryableError(error) {\n  return RETRYABLE_ERROR_CODES.has(error.code) || error instanceof MongoNetworkError || error.message.match(/not master/) || error.message.match(/node is recovering/);\n}\n\nconst SDAM_RECOVERING_CODES = new Set([91, // ShutdownInProgress\n189, // PrimarySteppedDown\n11600, // InterruptedAtShutdown\n11602, // InterruptedDueToReplStateChange\n13436 // NotMasterOrSecondary\n]);\nconst SDAM_NOTMASTER_CODES = new Set([10107, // NotMaster\n13435 // NotMasterNoSlaveOk\n]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([11600, // InterruptedAtShutdown\n91 // ShutdownInProgress\n]);\n\nfunction isRecoveringError(err) {\n  if (err.code && SDAM_RECOVERING_CODES.has(err.code)) {\n    return true;\n  }\n\n  return err.message.match(/not master or secondary/) || err.message.match(/node is recovering/);\n}\n\nfunction isNotMasterError(err) {\n  if (err.code && SDAM_NOTMASTER_CODES.has(err.code)) {\n    return true;\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return err.message.match(/not master/);\n}\n\nfunction isNodeShuttingDownError(err) {\n  return err.code && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code);\n}\n/**\r\n * Determines whether SDAM can recover from a given error. If it cannot\r\n * then the pool will be cleared, and server state will completely reset\r\n * locally.\r\n *\r\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\r\n * @param {MongoError|Error} error\r\n * @param {Server} server\r\n */\n\n\nfunction isSDAMUnrecoverableError(error, server) {\n  if (error instanceof MongoParseError) {\n    return true;\n  }\n\n  if (isRecoveringError(error) || isNotMasterError(error)) {\n    if (maxWireVersion(server) >= 8 && !isNodeShuttingDownError(error)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  MongoError,\n  MongoNetworkError,\n  MongoParseError,\n  MongoTimeoutError,\n  MongoWriteConcernError,\n  mongoErrorContextSymbol,\n  isRetryableError,\n  isSDAMUnrecoverableError\n};","map":{"version":3,"sources":["C:/Users/mehta/daydream/node_modules/mongodb/lib/core/error.js"],"names":["mongoErrorContextSymbol","Symbol","maxWireVersion","require","MongoError","Error","constructor","message","stack","errmsg","$err","name","captureStackTrace","create","options","hasErrorLabel","label","errorLabels","indexOf","MongoNetworkError","MongoParseError","MongoTimeoutError","makeWriteConcernResultObject","input","output","Object","assign","ok","code","codeName","MongoWriteConcernError","result","RETRYABLE_ERROR_CODES","Set","isRetryableError","error","has","match","SDAM_RECOVERING_CODES","SDAM_NOTMASTER_CODES","SDAM_NODE_SHUTTING_DOWN_ERROR_CODES","isRecoveringError","err","isNotMasterError","isNodeShuttingDownError","isSDAMUnrecoverableError","server","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst mongoErrorContextSymbol = Symbol('mongoErrorContextSymbol');\r\nconst maxWireVersion = require('./utils').maxWireVersion;\r\n\r\n/**\r\n * Creates a new MongoError\r\n *\r\n * @augments Error\r\n * @param {Error|string|object} message The error message\r\n * @property {string} message The error message\r\n * @property {string} stack The error call stack\r\n */\r\nclass MongoError extends Error {\r\n  constructor(message) {\r\n    if (message instanceof Error) {\r\n      super(message.message);\r\n      this.stack = message.stack;\r\n    } else {\r\n      if (typeof message === 'string') {\r\n        super(message);\r\n      } else {\r\n        super(message.message || message.errmsg || message.$err || 'n/a');\r\n        for (var name in message) {\r\n          this[name] = message[name];\r\n        }\r\n      }\r\n\r\n      Error.captureStackTrace(this, this.constructor);\r\n    }\r\n\r\n    this.name = 'MongoError';\r\n    this[mongoErrorContextSymbol] = this[mongoErrorContextSymbol] || {};\r\n  }\r\n\r\n  /**\r\n   * Creates a new MongoError object\r\n   *\r\n   * @param {Error|string|object} options The options used to create the error.\r\n   * @return {MongoError} A MongoError instance\r\n   * @deprecated Use `new MongoError()` instead.\r\n   */\r\n  static create(options) {\r\n    return new MongoError(options);\r\n  }\r\n\r\n  hasErrorLabel(label) {\r\n    return this.errorLabels && this.errorLabels.indexOf(label) !== -1;\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a new MongoNetworkError\r\n *\r\n * @param {Error|string|object} message The error message\r\n * @property {string} message The error message\r\n * @property {string} stack The error call stack\r\n */\r\nclass MongoNetworkError extends MongoError {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = 'MongoNetworkError';\r\n\r\n    // This is added as part of the transactions specification\r\n    this.errorLabels = ['TransientTransactionError'];\r\n  }\r\n}\r\n\r\n/**\r\n * An error used when attempting to parse a value (like a connection string)\r\n *\r\n * @param {Error|string|object} message The error message\r\n * @property {string} message The error message\r\n */\r\nclass MongoParseError extends MongoError {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = 'MongoParseError';\r\n  }\r\n}\r\n\r\n/**\r\n * An error signifying a timeout event\r\n *\r\n * @param {Error|string|object} message The error message\r\n * @property {string} message The error message\r\n */\r\nclass MongoTimeoutError extends MongoError {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = 'MongoTimeoutError';\r\n  }\r\n}\r\n\r\nfunction makeWriteConcernResultObject(input) {\r\n  const output = Object.assign({}, input);\r\n\r\n  if (output.ok === 0) {\r\n    output.ok = 1;\r\n    delete output.errmsg;\r\n    delete output.code;\r\n    delete output.codeName;\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\n/**\r\n * An error thrown when the server reports a writeConcernError\r\n *\r\n * @param {Error|string|object} message The error message\r\n * @param {object} result The result document (provided if ok: 1)\r\n * @property {string} message The error message\r\n * @property {object} [result] The result document (provided if ok: 1)\r\n */\r\nclass MongoWriteConcernError extends MongoError {\r\n  constructor(message, result) {\r\n    super(message);\r\n    this.name = 'MongoWriteConcernError';\r\n\r\n    if (result != null) {\r\n      this.result = makeWriteConcernResultObject(result);\r\n    }\r\n  }\r\n}\r\n\r\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\r\nconst RETRYABLE_ERROR_CODES = new Set([\r\n  6, // HostUnreachable\r\n  7, // HostNotFound\r\n  89, // NetworkTimeout\r\n  91, // ShutdownInProgress\r\n  189, // PrimarySteppedDown\r\n  9001, // SocketException\r\n  10107, // NotMaster\r\n  11600, // InterruptedAtShutdown\r\n  11602, // InterruptedDueToReplStateChange\r\n  13435, // NotMasterNoSlaveOk\r\n  13436 // NotMasterOrSecondary\r\n]);\r\n\r\n/**\r\n * Determines whether an error is something the driver should attempt to retry\r\n *\r\n * @param {MongoError|Error} error\r\n */\r\nfunction isRetryableError(error) {\r\n  return (\r\n    RETRYABLE_ERROR_CODES.has(error.code) ||\r\n    error instanceof MongoNetworkError ||\r\n    error.message.match(/not master/) ||\r\n    error.message.match(/node is recovering/)\r\n  );\r\n}\r\n\r\nconst SDAM_RECOVERING_CODES = new Set([\r\n  91, // ShutdownInProgress\r\n  189, // PrimarySteppedDown\r\n  11600, // InterruptedAtShutdown\r\n  11602, // InterruptedDueToReplStateChange\r\n  13436 // NotMasterOrSecondary\r\n]);\r\n\r\nconst SDAM_NOTMASTER_CODES = new Set([\r\n  10107, // NotMaster\r\n  13435 // NotMasterNoSlaveOk\r\n]);\r\n\r\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\r\n  11600, // InterruptedAtShutdown\r\n  91 // ShutdownInProgress\r\n]);\r\n\r\nfunction isRecoveringError(err) {\r\n  if (err.code && SDAM_RECOVERING_CODES.has(err.code)) {\r\n    return true;\r\n  }\r\n\r\n  return err.message.match(/not master or secondary/) || err.message.match(/node is recovering/);\r\n}\r\n\r\nfunction isNotMasterError(err) {\r\n  if (err.code && SDAM_NOTMASTER_CODES.has(err.code)) {\r\n    return true;\r\n  }\r\n\r\n  if (isRecoveringError(err)) {\r\n    return false;\r\n  }\r\n\r\n  return err.message.match(/not master/);\r\n}\r\n\r\nfunction isNodeShuttingDownError(err) {\r\n  return err.code && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code);\r\n}\r\n\r\n/**\r\n * Determines whether SDAM can recover from a given error. If it cannot\r\n * then the pool will be cleared, and server state will completely reset\r\n * locally.\r\n *\r\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\r\n * @param {MongoError|Error} error\r\n * @param {Server} server\r\n */\r\nfunction isSDAMUnrecoverableError(error, server) {\r\n  if (error instanceof MongoParseError) {\r\n    return true;\r\n  }\r\n\r\n  if (isRecoveringError(error) || isNotMasterError(error)) {\r\n    if (maxWireVersion(server) >= 8 && !isNodeShuttingDownError(error)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nmodule.exports = {\r\n  MongoError,\r\n  MongoNetworkError,\r\n  MongoParseError,\r\n  MongoTimeoutError,\r\n  MongoWriteConcernError,\r\n  mongoErrorContextSymbol,\r\n  isRetryableError,\r\n  isSDAMUnrecoverableError\r\n};\r\n"]},"metadata":{},"sourceType":"script"}